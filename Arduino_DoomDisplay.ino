/******************************************
 *  Hey Reddit! Some Remarks here:
 *  a) doing this for fun, and there are a lot of points to improve/extend. Feel free to use and share!
 *  b) I used it with a 480*320 display on an Arduino Uno Clone
 *  c) Doom Guy wounded state just scales with the GPU Temp which is just a quick "hack" i will likely extend it and play around with it
 *  d) Most Important Have FUN! :) - buttermilk
 */



#include "Arduino.h"
#include <SPI.h>            // f.k. for Arduino-1.5.2
//#define USE_SDFAT

#include <Adafruit_GFX.h>   // Hardware-specific library
#include <MCUFRIEND_kbv.h>
MCUFRIEND_kbv tft;

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))

//BMP Load Stuff

//Message Identifiers
#define CPU_TEMP 'A'
#define GPU_TEMP 'B'
#define CPU_LOAD 'C'
#define GPU_LOAD 'D'
#define MB_TEMP 'E'
#define MB_FAN 'F'
#define RAM_LOAD 'G'

//Colors
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xD861
#define	GREEN   0x04C7
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define ORANGE  0xDB60
#define GRAY 	0xC638
#define WHITE   0xFFFF
#define BG_COL 0x931D
#define TEXT_COL 0x18C3
#define ALPHA_COL  0x07FF

//define GLUE_Demo_480x320
#define MAX_X  480
#define MAY_Y  320


#define STATE_WAIT 0
#define STATE_RUN 1
char State;

//History for Graph Data
#define HIST_LEN 30
short GPU_TEMP_HIST[HIST_LEN];
short GPU_HIST_CNT;

short CPU_TEMP_HIST[HIST_LEN];
short CPU_HIST_CNT;

const unsigned short DoomGuy1_side[696] PROGMEM={
	0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x49A3, 0x5A04, 0x5A04, 0x5A04, 0x6A24, 0x7265, 0x7265, 0x7265, 0x7265, 0x7265, 0x6A24,   // 0x0010 (16) pixels
	0x5A04, 0x5A04, 0x49A3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x7A85, 0x8AE6,   // 0x0020 (32) pixels
	0xAB68, 0xBBC9, 0xCC0A, 0xCC0A, 0xCC0A, 0xBBC9, 0xAB68, 0x9B07, 0x7265, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
	0x07FF, 0x07FF, 0x3142, 0x5A04, 0x7265, 0x8AE6, 0xAB68, 0xBBC9, 0xCBE9, 0xCC0A, 0xBBC9, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6,   // 0x0040 (64) pixels
	0x8AE6, 0x7265, 0x7265, 0x51E3, 0x49A3, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07,   // 0x0050 (80) pixels
	0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265, 0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF,   // 0x0060 (96) pixels
	0x07FF, 0x2901, 0x3962, 0x5A04, 0x7265, 0x5A04, 0x8AE6, 0x9B07, 0x8AE6, 0x8AE6, 0x8AE6, 0x8AE6, 0x49A3, 0x8AE6, 0x5A04, 0x49A3,   // 0x0070 (112) pixels
	0x5A04, 0x49A3, 0x3142, 0x2901, 0x2901, 0x2901, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x49A3, 0x51E3, 0x5A04, 0x8AE6, 0x51E3,   // 0x0080 (128) pixels
	0x9B07, 0x6A24, 0x6A24, 0x8AE6, 0x6A24, 0x49A3, 0x6A24, 0x49A3, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x3962, 0x2901, 0x07FF,   // 0x0090 (144) pixels
	0x07FF, 0x2901, 0x49A3, 0x49A3, 0x7265, 0x7265, 0x51E3, 0x8AE6, 0x51E3, 0x6A24, 0x7265, 0x6A24, 0x6A24, 0x8AE6, 0x8AE6, 0x8AE6,   // 0x00A0 (160) pixels
	0x82A6, 0x82A6, 0x6A24, 0x49A3, 0x3962, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x51E3, 0x7265, 0x8AE6, 0x7265, 0x51E3,   // 0x00B0 (176) pixels
	0xA347, 0x51E3, 0x7265, 0x8AE6, 0xA347, 0xB388, 0x9B07, 0xA347, 0x8AE6, 0x8AE6, 0x8AE6, 0x6A24, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
	0x07FF, 0x2901, 0x49A3, 0x5A04, 0x8AE6, 0xAB68, 0xB388, 0xA347, 0xA347, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xA347,   // 0x00D0 (208) pixels
	0xA347, 0xB388, 0xAB68, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xCBE9, 0xCBE9,   // 0x00E0 (224) pixels
	0xB388, 0xA347, 0xAB68, 0xAB68, 0xAB68, 0xAB68, 0xA347, 0xB388, 0xCBE9, 0xCBE9, 0xCC0A, 0x9B07, 0x5A04, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
	0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A,   // 0x0100 (256) pixels
	0xE4CD, 0xED0E, 0xCC0A, 0x9B07, 0x7265, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2,   // 0x0110 (272) pixels
	0xE4CD, 0xE4CD, 0xCC0A, 0xD44B, 0xD44B, 0xCC0A, 0xE4CD, 0xE4CD, 0x9B07, 0x51E3, 0x0000, 0x3962, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x0120 (288) pixels
	0xB388, 0x6A24, 0x49A3, 0x7265, 0x3962, 0x3962, 0x51E3, 0xA347, 0xDC8C, 0xFDD2, 0xBBC9, 0xF54F, 0xF54F, 0xBBC9, 0xFDD2, 0x9B07,   // 0x0130 (304) pixels
	0x0000, 0x3962, 0x7265, 0x82A6, 0x7265, 0x49A3, 0x6A24, 0xB388, 0xB388, 0x6A24, 0x4184, 0xB388, 0x82A6, 0x5A04, 0x3962, 0x3962,   // 0x0140 (320) pixels
	0x3962, 0x0000, 0x5A04, 0xAB68, 0xAB68, 0x5A04, 0x0000, 0x0000, 0x0000, 0x3962, 0x5A04, 0xB388, 0x8AE6, 0x4184, 0x6A24, 0xB388,   // 0x0150 (336) pixels
	0x8AE6, 0x6A24, 0x6286, 0xB388, 0x7265, 0x7BEF, 0x9CF3, 0x6B4D, 0x0000, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000, 0x52AA,   // 0x0160 (352) pixels
	0x9CF3, 0x6B4D, 0x0000, 0x7265, 0xB388, 0x6286, 0x6A24, 0x8AE6, 0x6A24, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0xED0E, 0xAB68,   // 0x0170 (368) pixels
	0x6A24, 0x5A04, 0x8AE6, 0xCC0A, 0xCC0A, 0x8AE6, 0x5A04, 0x6A24, 0xAB68, 0xED0E, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x6A24,   // 0x0180 (384) pixels
	0x82A6, 0x5A04, 0x82A6, 0xD44B, 0xD44B, 0xBBC9, 0xAB68, 0x8AE6, 0xAB68, 0xCC0A, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xCC0A, 0xAB68,   // 0x0190 (400) pixels
	0x8AE6, 0xAB68, 0xBBC9, 0xD44B, 0xD44B, 0x82A6, 0x5A04, 0x82A6, 0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCBE9,   // 0x01A0 (416) pixels
	0xE4CD, 0xFDD2, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xFDD2, 0xE4CD, 0xCBE9, 0xDC8C, 0xED0E, 0xDC8C, 0xCC0A, 0x8AE6, 0x5A04, 0x8AE6,   // 0x01B0 (432) pixels
	0x07FF, 0x5A04, 0x82A6, 0xA347, 0xAB68, 0xBBC9, 0xD44B, 0xED0E, 0xFD90, 0xDC8C, 0xD44B, 0xFD8F, 0xFEB7, 0xD44B, 0xDC8C, 0xFD90,   // 0x01C0 (448) pixels
	0xED0E, 0xD44B, 0xBBC9, 0xAB68, 0xA347, 0x82A6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0x9B07, 0xA347, 0xBBC9, 0xED0E, 0xFDF3,   // 0x01D0 (464) pixels
	0xD44B, 0xAB68, 0x9B07, 0x9C0C, 0x9C0C, 0x9B07, 0xAB68, 0xD44B, 0xFDF3, 0xED0E, 0xBBC9, 0xA347, 0x9B07, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
	0x07FF, 0x07FF, 0x7265, 0xB388, 0x9B07, 0xD44B, 0xFDD2, 0xE4CD, 0xA347, 0x51E3, 0x7265, 0x82A6, 0x82A6, 0x7265, 0x51E3, 0xA347,   // 0x01F0 (496) pixels
	0xE4CD, 0xFDD2, 0xD44B, 0x9B07, 0xB388, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0xCBE9, 0x9B07, 0xE4CD, 0xF54F, 0xBBC9,   // 0x0200 (512) pixels
	0xCC0A, 0xDC8C, 0xBBC9, 0xA347, 0xA347, 0xBBC9, 0xDC8C, 0xCC0A, 0xBBC9, 0xF54F, 0xE4CD, 0x9B07, 0xCBE9, 0x5A04, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
	0x07FF, 0x07FF, 0x51E3, 0xAB68, 0xA347, 0xD44B, 0xE4CD, 0xCC0A, 0xD44B, 0xF54F, 0xFDF3, 0xD44B, 0xD44B, 0xFDF3, 0xF54F, 0xD44B,   // 0x0220 (544) pixels
	0xCC0A, 0xE4CD, 0xD44B, 0xA347, 0xAB68, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0x8AE6,   // 0x0230 (560) pixels
	0x7265, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x7265, 0x8AE6, 0xD44B, 0xCBE9, 0xAB68, 0x82A6, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
	0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x8AE6, 0xB388, 0xCBE9, 0xCBE9, 0xCBE9, 0xD44B, 0xE4CD, 0xFD0B, 0xFD0B, 0xE4CD, 0xD44B, 0xCBE9,   // 0x0250 (592) pixels
	0xCBE9, 0xCBE9, 0xB388, 0x8AE6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x9B07, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
	0xCBE9, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68, 0xCBE9, 0xDC8C, 0xCC0A, 0x9B07, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
	0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347, 0xCC0A, 0xDC8C, 0xCBE9, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xCBE9, 0xDC8C,   // 0x0280 (640) pixels
	0xCC0A, 0xA347, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x82A6,   // 0x0290 (656) pixels
	0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0xB388, 0x82A6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
	0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x8AE6, 0xA347, 0xA347, 0xA347, 0xA347, 0x8AE6, 0x6A24,   // 0x02B0 (688) pixels
	};


const unsigned short DoomGuy1_neutral[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x49A3, 0x5A04, 0x5A04, 0x5A04, 0x6A24, 0x7265, 0x7265, 0x7265, 0x7265, 0x7265, 0x6A24,   // 0x0010 (16) pixels
0x5A04, 0x5A04, 0x49A3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x7A85, 0x8AE6,   // 0x0020 (32) pixels
0xAB68, 0xBBC9, 0xCC0A, 0xCC0A, 0xCC0A, 0xBBC9, 0xAB68, 0x9B07, 0x7265, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x5A04, 0x7265, 0x8AE6, 0xAB68, 0xBBC9, 0xCBE9, 0xCC0A, 0xBBC9, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6,   // 0x0040 (64) pixels
0x8AE6, 0x7265, 0x7265, 0x51E3, 0x49A3, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07,   // 0x0050 (80) pixels
0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265, 0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x3962, 0x5A04, 0x7265, 0x5A04, 0x8AE6, 0x9B07, 0x8AE6, 0x8AE6, 0x8AE6, 0x8AE6, 0x49A3, 0x8AE6, 0x5A04, 0x49A3,   // 0x0070 (112) pixels
0x5A04, 0x49A3, 0x3142, 0x2901, 0x2901, 0x2901, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x49A3, 0x51E3, 0x5A04, 0x8AE6, 0x51E3,   // 0x0080 (128) pixels
0x9B07, 0x6A24, 0x6A24, 0x8AE6, 0x6A24, 0x49A3, 0x6A24, 0x49A3, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x3962, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x49A3, 0x49A3, 0x7265, 0x7265, 0x51E3, 0x8AE6, 0x51E3, 0x6A24, 0x7265, 0x6A24, 0x6A24, 0x8AE6, 0x8AE6, 0x8AE6,   // 0x00A0 (160) pixels
0x82A6, 0x82A6, 0x6A24, 0x49A3, 0x3962, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x51E3, 0x7265, 0x8AE6, 0x7265, 0x51E3,   // 0x00B0 (176) pixels
0xA347, 0x51E3, 0x7265, 0x8AE6, 0xA347, 0xB388, 0x9B07, 0xA347, 0x8AE6, 0x8AE6, 0x8AE6, 0x6A24, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x49A3, 0x5A04, 0x8AE6, 0xAB68, 0xB388, 0xA347, 0xA347, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xA347,   // 0x00D0 (208) pixels
0xA347, 0xB388, 0xAB68, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xCBE9, 0xCBE9,   // 0x00E0 (224) pixels
0xB388, 0xA347, 0xAB68, 0xAB68, 0xAB68, 0xAB68, 0xA347, 0xB388, 0xCBE9, 0xCBE9, 0xCC0A, 0x9B07, 0x5A04, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A,   // 0x0100 (256) pixels
0xE4CD, 0xED0E, 0xCC0A, 0x9B07, 0x7265, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2,   // 0x0110 (272) pixels
0xE4CD, 0xE4CD, 0xCC0A, 0xD44B, 0xD44B, 0xCC0A, 0xE4CD, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x0120 (288) pixels
0xB388, 0x6A24, 0x49A3, 0x7265, 0x6A24, 0x6A24, 0x51E3, 0xA347, 0xDC8C, 0xB388, 0x7265, 0xB388, 0xB388, 0x7265, 0xB388, 0xDC8C,   // 0x0130 (304) pixels
0xA347, 0x51E3, 0x6A24, 0x6A24, 0x7265, 0x49A3, 0x6A24, 0xB388, 0xB388, 0x6A24, 0x4184, 0x8AE6, 0xAB68, 0x5A04, 0x3962, 0x3962,   // 0x0140 (320) pixels
0x3962, 0x49A3, 0x3962, 0x8AE6, 0x8AE6, 0x3962, 0x49A3, 0x3962, 0x3962, 0x3962, 0x5A04, 0xAB68, 0x8AE6, 0x4184, 0x6A24, 0xB388,   // 0x0150 (336) pixels
0x8AE6, 0x6A24, 0x6286, 0xB388, 0x7265, 0x6B4D, 0x0000, 0x6B4D, 0x39C7, 0x0000, 0x51E3, 0xD44B, 0xD44B, 0x51E3, 0x0000, 0x6B4D,   // 0x0160 (352) pixels
0x0000, 0x6B4D, 0xB596, 0x7265, 0xB388, 0x6286, 0x6A24, 0x8AE6, 0x6A24, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0xECB2, 0xBAAA,   // 0x0170 (368) pixels
0x6A24, 0x5A04, 0x8AE6, 0xCC0A, 0xE4CD, 0x8AE6, 0x5A04, 0x6A24, 0xBAAA, 0xECB2, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x6A24,   // 0x0180 (384) pixels
0x82A6, 0x5A04, 0x82A6, 0xDBCF, 0xD44B, 0xBBC9, 0xAB68, 0x8AE6, 0xAB68, 0xCBE9, 0xD44B, 0xFD0B, 0xFD8F, 0xD44B, 0xCBE9, 0xAB68,   // 0x0190 (400) pixels
0x8AE6, 0xAB68, 0xBBC9, 0xD44B, 0xDBCF, 0x82A6, 0x5A04, 0x82A6, 0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCBE9,   // 0x01A0 (416) pixels
0xFD0B, 0xFDD2, 0xE4CD, 0xFD0B, 0xFD8F, 0xE4CD, 0xFDD2, 0xFD0B, 0xCBE9, 0xDC8C, 0xED0E, 0xDC8C, 0xCC0A, 0x8AE6, 0x5A04, 0x8AE6,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0x82A6, 0xA347, 0xAB68, 0xBBC9, 0xD44B, 0xFD0B, 0xFE34, 0xDC8C, 0xD44B, 0xFD8F, 0xFEB7, 0xD44B, 0xDC8C, 0xFE34,   // 0x01C0 (448) pixels
0xFD0B, 0xD44B, 0xBBC9, 0xAB68, 0xA347, 0x82A6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0x9B07, 0xA347, 0xBBC9, 0xED0E, 0xF54F,   // 0x01D0 (464) pixels
0xD44B, 0xAB68, 0x9B07, 0x9C0C, 0x9C0C, 0x9B07, 0xAB68, 0xD44B, 0xF54F, 0xED0E, 0xBBC9, 0xA347, 0x9B07, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0xB388, 0x9B07, 0xD44B, 0xFDD2, 0xE4CD, 0xBBC9, 0x51E3, 0x7265, 0x82A6, 0x82A6, 0x7265, 0x51E3, 0xBBC9,   // 0x01F0 (496) pixels
0xE4CD, 0xFDD2, 0xD44B, 0x9B07, 0xB388, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0xCBE9, 0x9B07, 0xE4CD, 0xF54F, 0xCC0A,   // 0x0200 (512) pixels
0xCC0A, 0xD44B, 0xBBC9, 0xA347, 0xA347, 0xBBC9, 0xD44B, 0xCC0A, 0xCC0A, 0xF54F, 0xE4CD, 0x9B07, 0xCBE9, 0x5A04, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x51E3, 0xAB68, 0xA347, 0xD44B, 0xE4CD, 0xCC0A, 0xD44B, 0xF54F, 0xFDF3, 0xDC8C, 0xDC8C, 0xFDF3, 0xF54F, 0xD44B,   // 0x0220 (544) pixels
0xCC0A, 0xE4CD, 0xD44B, 0xA347, 0xAB68, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0x8AE6,   // 0x0230 (560) pixels
0x7265, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x7265, 0x8AE6, 0xD44B, 0xCBE9, 0xAB68, 0x82A6, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x8AE6, 0xB388, 0xCBE9, 0xCBE9, 0xCBE9, 0xD44B, 0xE4CD, 0xFD0B, 0xFD0B, 0xE4CD, 0xD44B, 0xCBE9,   // 0x0250 (592) pixels
0xCBE9, 0xCBE9, 0xB388, 0x8AE6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
0xCBE9, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68, 0xCBE9, 0xDC8C, 0xCC0A, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCC0A, 0xDC8C, 0xCBE9, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xCBE9, 0xDC8C,   // 0x0280 (640) pixels
0xCC0A, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x82A6,   // 0x0290 (656) pixels
0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0xB388, 0x82A6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x8AE6, 0xA347, 0xA347, 0xA347, 0xA347, 0x8AE6, 0x6A24,   // 0x02B0 (688) pixels
};



const unsigned short DoomGuy2_neutral[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x7265, 0x82A6, 0xAB68, 0xAB68, 0xB388, 0xB388, 0xAB68, 0x9B07, 0x8AE6, 0x7265,   // 0x0010 (16) pixels
0x6A24, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x51E3, 0x6A24, 0x82A6, 0x8AE6, 0xA347,   // 0x0020 (32) pixels
0xBBC9, 0xCBE9, 0xCBE9, 0xBBC9, 0xBBC9, 0xAB68, 0x9B07, 0x8AE6, 0x82A6, 0x7265, 0x7265, 0x6A24, 0x49A3, 0x3142, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x49A3, 0x82A6, 0x8AE6, 0xA347, 0xB388, 0xCBE9, 0xD44B, 0xD44B, 0xCC0A, 0xCBE9, 0xCBE9, 0xAB68, 0xA347,   // 0x0040 (64) pixels
0x8AE6, 0x8AE6, 0x82A6, 0x6A24, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x51E3, 0x82A6, 0x82A6, 0xB388, 0x9B07,   // 0x0050 (80) pixels
0xAB68, 0xCC0A, 0xAB68, 0xCC0A, 0xB388, 0xA347, 0x9B07, 0xAB68, 0x8AE6, 0x8AE6, 0x7265, 0x6A24, 0x49A3, 0x2901, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x2901, 0x3142, 0x7265, 0x82A6, 0xAB68, 0x8AE6, 0x9B07, 0xCC0A, 0x82A6, 0xAB68, 0xB388, 0xA347, 0x8AE6, 0x7265,   // 0x0070 (112) pixels
0x9B07, 0x7265, 0x5A04, 0x5A04, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x2901, 0x2901, 0x5A04, 0x7265, 0x9B07, 0x8AE6,   // 0x0080 (128) pixels
0x51E3, 0xAB68, 0x6A24, 0x7A85, 0x8AE6, 0xA347, 0x6A24, 0x5A04, 0x49A3, 0x5A04, 0x49A3, 0x49A3, 0x2901, 0x3142, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x3142, 0x3142, 0x49A3, 0x51E3, 0x5A04, 0x9B07, 0x51E3, 0x9B07, 0x3142, 0x3962, 0x7265, 0x8AE6, 0x6A24, 0x6A24,   // 0x00A0 (160) pixels
0x49A3, 0x3962, 0x5A04, 0x3142, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x51E3, 0x49A3, 0x7265, 0x82A6, 0x51E3,   // 0x00B0 (176) pixels
0x8AE6, 0x51E3, 0x9B07, 0x51E3, 0x3142, 0x6A24, 0x6A24, 0x8AE6, 0x6A24, 0x49A3, 0x6A24, 0x51E3, 0x2901, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3142, 0x5A04, 0x51E3, 0x7265, 0x8AE6, 0xAB68, 0x51E3, 0xBBC9, 0x51E3, 0x9B07, 0x82A6, 0x51E3, 0x6A24, 0x7A85,   // 0x00D0 (208) pixels
0xA347, 0x8AE6, 0x6A24, 0x7265, 0x5A04, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x6A24, 0x6A24, 0x8AE6, 0xAB68, 0xB388,   // 0x00E0 (224) pixels
0x82A6, 0xA347, 0x6A24, 0xA347, 0xBBC9, 0x51E3, 0xBBC9, 0x6A24, 0xA347, 0xA347, 0x82A6, 0x8AE6, 0x5A04, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x82A6, 0x9B07, 0xB388, 0xB388, 0xB388, 0x82A6, 0xA347, 0x82A6, 0x8AE6, 0x8AE6, 0x51E3, 0xA347,   // 0x0100 (256) pixels
0x8AE6, 0xB388, 0xB388, 0x9B07, 0x7265, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x0000, 0x49A3, 0x7265, 0x9B07, 0x9B07, 0xCC0A, 0xED0E,   // 0x0110 (272) pixels
0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A, 0xE4CD, 0xED0E, 0x9B07, 0x7265, 0x49A3, 0x0000, 0xB388,   // 0x0120 (288) pixels
0xB388, 0x3962, 0x49A3, 0x8AE6, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2, 0xFD90, 0xE4CD, 0xCC0A, 0xA347, 0xA347, 0xCC0A, 0xE4CD, 0xFD90,   // 0x0130 (304) pixels
0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x8AE6, 0x49A3, 0x3962, 0xB388, 0x8AE6, 0x3962, 0x49A3, 0x8AE6, 0x51E3, 0x3962, 0x51E3, 0xA347,   // 0x0140 (320) pixels
0xDC8C, 0xFDD2, 0xB388, 0xCC0A, 0xF54F, 0xB388, 0xFDD2, 0xDC8C, 0xA347, 0x51E3, 0x3962, 0x51E3, 0x8AE6, 0x5A04, 0x3962, 0x8AE6,   // 0x0150 (336) pixels
0x6A24, 0x5A04, 0x5A04, 0x5A04, 0x3962, 0x5A04, 0x3962, 0x6A24, 0xB388, 0x6A24, 0x49A3, 0xA347, 0xA347, 0x49A3, 0x6A24, 0xB388,   // 0x0160 (352) pixels
0x6A24, 0x3962, 0x5A04, 0x3962, 0x5A04, 0x5A04, 0x5A04, 0x6A24, 0x82A6, 0x5A04, 0x5A04, 0x5A04, 0x2901, 0xB269, 0x0000, 0x0000,   // 0x0170 (368) pixels
0x78C3, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000, 0x78C3, 0x0000, 0x0000, 0xB269, 0x2901, 0x5A04, 0x82A6, 0x5A04, 0x82A6,   // 0x0180 (384) pixels
0x8AE6, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0x7BEC, 0x6349, 0x6A24, 0x5A04, 0x6A24, 0xAB68, 0xAB68, 0x6A24, 0x5A04, 0x6A24,   // 0x0190 (400) pixels
0x6349, 0x7BEC, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x8AE6, 0x07FF, 0x5A04, 0x82A6, 0xD44B, 0xD44B, 0xD44B, 0xA347, 0x8AE6,   // 0x01A0 (416) pixels
0xAB68, 0xCC0A, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xCC0A, 0xAB68, 0x8AE6, 0xA347, 0xD44B, 0xD44B, 0xD44B, 0x7265, 0x5A04, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0x7265, 0xA347, 0xAB68, 0xA347, 0xD44B, 0xFDF3, 0xE4CD, 0xFDD2, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xFDD2, 0xE4CD,   // 0x01C0 (448) pixels
0xFDF3, 0xD44B, 0xA347, 0xAB68, 0xA347, 0x7265, 0x5A04, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x8AE6, 0x8AE6, 0xBBC9, 0xFDD2, 0xD44B,   // 0x01D0 (464) pixels
0xA347, 0x7265, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0x7265, 0xA347, 0xD44B, 0xFDD2, 0xBBC9, 0x8AE6, 0x8AE6, 0x7265, 0x07FF, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0xA347, 0x9B07, 0xD44B, 0xF54F, 0xA347, 0x8AE6, 0xA347, 0xA347, 0xE4CD, 0xE4CD, 0xA347, 0x8904, 0x8AE6,   // 0x01F0 (496) pixels
0xA347, 0xF54F, 0xD44B, 0x9B07, 0xA347, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0xCBE9, 0x8AE6, 0xE4CD, 0xE4CD, 0xA347,   // 0x0200 (512) pixels
0xCC0A, 0xDC8C, 0xA347, 0xB388, 0xB388, 0xAA28, 0x80E3, 0xCC0A, 0xA347, 0xE4CD, 0xE4CD, 0x8AE6, 0xCBE9, 0x5A04, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x51E3, 0xAB68, 0xA347, 0xD44B, 0xE4CD, 0xCC0A, 0xBAAA, 0xC30C, 0xFDF3, 0xD44B, 0xD44B, 0xCB4D, 0xB269, 0xD44B,   // 0x0220 (544) pixels
0xCC0A, 0xE4CD, 0xD44B, 0xA347, 0xAB68, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0xAB68,   // 0x0230 (560) pixels
0x80E3, 0x78C3, 0x7A85, 0x5A04, 0x5A04, 0x9165, 0x9165, 0xAB68, 0xAB68, 0xD44B, 0xCBE9, 0xAB68, 0x82A6, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x8AE6, 0xB388, 0xCBE9, 0xCBE9, 0xC30C, 0xC30C, 0xF54F, 0xFDD2, 0xFDD2, 0xF54F, 0xD44B, 0xCBE9,   // 0x0250 (592) pixels
0xCBE9, 0xCBE9, 0xB388, 0x8AE6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x9B07, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
0xB388, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68, 0xB388, 0xDC8C, 0xCC0A, 0x9B07, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347, 0xCC0A, 0xDC8C, 0xA347, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xA347, 0xDC8C,   // 0x0280 (640) pixels
0xCC0A, 0xA347, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0xA347,   // 0x0290 (656) pixels
0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0xB388, 0xA347, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x8AE6, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0x8AE6,   // 0x02B0 (688) pixels
};

const unsigned short DoomGuy_grin[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x5A04, 0x6A24, 0x7265, 0x8AE6, 0x9B07, 0x9B07, 0x9B07, 0x9B07, 0x8AE6, 0x7265,   // 0x0010 (16) pixels
0x6A24, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x51E3, 0x6A24, 0x8AE6, 0x8AE6, 0xA347,   // 0x0020 (32) pixels
0xA347, 0xAB68, 0xAB68, 0xBBC9, 0xB388, 0xAB68, 0x9B07, 0x8AE6, 0x82A6, 0x7265, 0x7265, 0x6A24, 0x49A3, 0x3142, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x49A3, 0x8AE6, 0x8AE6, 0xA347, 0xA347, 0xB388, 0xB388, 0xBBC9, 0xBBC9, 0xBBC9, 0xBBC9, 0xB388, 0xA347,   // 0x0040 (64) pixels
0x8AE6, 0x8AE6, 0x82A6, 0x6A24, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x51E3, 0x5A04, 0x7265, 0x8AE6, 0x9B07,   // 0x0050 (80) pixels
0xBBC9, 0xCBE9, 0xCC0A, 0xA347, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6, 0x8AE6, 0x7265, 0x7265, 0x51E3, 0x2901, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x2901, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07, 0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265,   // 0x0070 (112) pixels
0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x2901, 0x2901, 0x5A04, 0x7265, 0x5A04, 0x51E3,   // 0x0080 (128) pixels
0x7265, 0x8AE6, 0x8AE6, 0x7265, 0x6A24, 0x7265, 0x7265, 0x5A04, 0x3142, 0x5A04, 0x49A3, 0x3142, 0x2901, 0x3142, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x3142, 0x3142, 0x49A3, 0x51E3, 0x5A04, 0x49A3, 0x6A24, 0x8AE6, 0x82A6, 0x3142, 0x5A04, 0x7265, 0x7265, 0x49A3,   // 0x00A0 (160) pixels
0x3142, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x2901, 0x49A3, 0x7265, 0x82A6, 0x49A3,   // 0x00B0 (176) pixels
0x5A04, 0x82A6, 0x3142, 0x51E3, 0x5A04, 0x7265, 0x5A04, 0x3142, 0x6A24, 0x49A3, 0x6A24, 0x51E3, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3142, 0x5A04, 0x51E3, 0x7265, 0x8AE6, 0xAB68, 0x3142, 0x51E3, 0x3142, 0x9B07, 0x3142, 0x7265, 0x3142, 0x6A24,   // 0x00D0 (208) pixels
0xA347, 0x8AE6, 0x6A24, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x5A04, 0x5A04, 0x8AE6, 0xAB68, 0xB388,   // 0x00E0 (224) pixels
0x82A6, 0x3142, 0x3142, 0xA347, 0xBBC9, 0x3142, 0xBBC9, 0x6A24, 0xA347, 0xA347, 0x82A6, 0xAB68, 0x8AE6, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x7265, 0x9B07, 0xB388, 0xB388, 0xB388, 0x82A6, 0x3142, 0x82A6, 0x8AE6, 0x8AE6, 0x9B07, 0xA347,   // 0x0100 (256) pixels
0x8AE6, 0xB388, 0xB388, 0x82A6, 0x9B07, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x0000, 0x49A3, 0x7265, 0x7265, 0x9B07, 0xCC0A, 0xED0E,   // 0x0110 (272) pixels
0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A, 0xE4CD, 0xED0E, 0xCC0A, 0x7265, 0x3962, 0x0000, 0xB388,   // 0x0120 (288) pixels
0xB388, 0x3962, 0x49A3, 0x8AE6, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2, 0xFD90, 0xE4CD, 0xCC0A, 0xA347, 0xA347, 0xCC0A, 0xE4CD, 0xFD90,   // 0x0130 (304) pixels
0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x8AE6, 0x49A3, 0x3962, 0xB388, 0x8AE6, 0x3962, 0x49A3, 0xB388, 0x51E3, 0x51E3, 0xA347, 0xA347,   // 0x0140 (320) pixels
0xDC8C, 0xFDD2, 0xB388, 0xCC0A, 0xF54F, 0xB388, 0xFDD2, 0xDC8C, 0xA347, 0xA347, 0x51E3, 0x51E3, 0xB388, 0x49A3, 0x3962, 0x8AE6,   // 0x0150 (336) pixels
0x6A24, 0x5A04, 0x82A6, 0x8AE6, 0x3962, 0x3962, 0x3962, 0x3962, 0x6A24, 0x6A24, 0x49A3, 0xA347, 0xA347, 0x49A3, 0x6A24, 0x6A24,   // 0x0160 (352) pixels
0x3962, 0x3962, 0x3962, 0x3962, 0x8AE6, 0x82A6, 0x5A04, 0x6A24, 0x82A6, 0x5A04, 0x9B07, 0xE4CD, 0x7265, 0xE471, 0x8945, 0x0000,   // 0x0170 (368) pixels
0x0000, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000, 0x0000, 0x0000, 0x8945, 0xE471, 0x7265, 0xE4CD, 0x9B07, 0x5A04, 0x82A6,   // 0x0180 (384) pixels
0x8AE6, 0x5A04, 0xCBE9, 0xF54F, 0xE4CD, 0xAB68, 0xC30C, 0x9165, 0x9165, 0x5A04, 0x6A24, 0xAB68, 0xAB68, 0x6A24, 0x5A04, 0x9165,   // 0x0190 (400) pixels
0x9165, 0xC30C, 0xAB68, 0xE4CD, 0xF54F, 0xCBE9, 0x5A04, 0x8AE6, 0x07FF, 0x5A04, 0xCBE9, 0xF54F, 0xF54F, 0xE4CD, 0xE4CD, 0xE4CD,   // 0x01A0 (416) pixels
0xF54F, 0xD44B, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xD44B, 0xF54F, 0xE4CD, 0xE4CD, 0xE4CD, 0xF54F, 0xF54F, 0xCBE9, 0x5A04, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x82A6, 0xBBC9, 0xD44B, 0xE4CD, 0xCB4D, 0xBAAA, 0x8AE6, 0x5A04, 0xAB68, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0xAB68, 0x5A04,   // 0x01C0 (448) pixels
0x8AE6, 0xBBC9, 0xCB4D, 0xCB4D, 0xD44B, 0xCBE9, 0x82A6, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xCB4D, 0x9165, 0x39C7, 0x6A24,   // 0x01D0 (464) pixels
0x5A04, 0x9165, 0xA347, 0xE4CD, 0xE4CD, 0xA347, 0x5820, 0x5A04, 0x6A24, 0x39C7, 0x9165, 0xCB4D, 0xCBE9, 0xBBC9, 0x07FF, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x9B07, 0xCBE9, 0xCB4D, 0xBAAA, 0x9165, 0x39C7, 0x8AE6, 0x8AE6, 0x9165, 0x82A6, 0x82A6, 0x9165, 0x6041, 0x8AE6,   // 0x01F0 (496) pixels
0x39C7, 0x9165, 0xBAAA, 0xCB4D, 0xCBE9, 0xAB68, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xCBE9, 0xD44B, 0xCB4D, 0xBAAA, 0x630C,   // 0x0200 (512) pixels
0x4A69, 0x73AE, 0x7BEF, 0x9CF3, 0x9CF3, 0x7BEF, 0x73AE, 0x4A69, 0x630C, 0xB388, 0xBAAA, 0xD44B, 0xA347, 0x9B07, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x07FF, 0xA347, 0xCBE9, 0xD44B, 0xB388, 0xD44B, 0x630C, 0x630C, 0xAD55, 0xDEDB, 0xDEDB, 0xAD55, 0x630C, 0x630C,   // 0x0220 (544) pixels
0xD44B, 0xAB68, 0xD44B, 0xCBE9, 0x9B07, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCBE9, 0xB388, 0xAB68,   // 0x0230 (560) pixels
0xD44B, 0x630C, 0x73AE, 0x7BEF, 0x7BEF, 0x73AE, 0x630C, 0xD44B, 0xAB68, 0xB388, 0xCBE9, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCBE9, 0xCBE9, 0x8AE6, 0x9986, 0xAA28, 0xCB4D, 0xCB4D, 0xAA28, 0x9986, 0x8AE6,   // 0x0250 (592) pixels
0xCBE9, 0xCBE9, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
0xCBE9, 0xAA28, 0x5A04, 0x3962, 0x3962, 0x5A04, 0x9165, 0xCBE9, 0xDC8C, 0xCC0A, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xDC8C, 0xAA28, 0xAA28, 0x82A6, 0x82A6, 0xAA28, 0xBAAA, 0xDC8C,   // 0x0280 (640) pixels
0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24,   // 0x0290 (656) pixels
0x8AE6, 0xAA28, 0x9165, 0xFDF3, 0xFDF3, 0xAA28, 0xBAAA, 0x8AE6, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0x9165, 0xB388, 0xB388, 0x8AE6, 0x5A04, 0x07FF,   // 0x02B0 (688) pixels
};

const unsigned short DoomGuy2_side[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x49A3, 0x5A04, 0x5A04, 0x6A24, 0x7265, 0x7265, 0x7265, 0x7265, 0x7265, 0x7265, 0x6A24,   // 0x0010 (16) pixels
0x5A04, 0x5A04, 0x49A3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x3142, 0x5A04, 0x51E3, 0x5A04,   // 0x0020 (32) pixels
0x6A24, 0x7265, 0x8AE6, 0x9B07, 0x9B07, 0x9B07, 0x9B07, 0x8AE6, 0x7265, 0x6A24, 0x5A04, 0x51E3, 0x3142, 0x07FF, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x49A3, 0x51E3, 0x6A24, 0x7265, 0x8AE6, 0xA347, 0xA347, 0xAB68, 0xAB68, 0xBBC9, 0xB388, 0xAB68, 0x9B07,   // 0x0040 (64) pixels
0x8AE6, 0x82A6, 0x7265, 0x7265, 0x49A3, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x49A3, 0x49A3, 0x7265, 0x8AE6, 0xA347,   // 0x0050 (80) pixels
0xA347, 0xB388, 0xB388, 0xBBC9, 0xBBC9, 0xBBC9, 0xBBC9, 0xB388, 0xA347, 0x8AE6, 0x8AE6, 0x82A6, 0x49A3, 0x2901, 0x07FF, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x3142, 0x3142, 0x51E3, 0x7265, 0x7265, 0x8AE6, 0x9B07, 0xBBC9, 0xCBE9, 0xCC0A, 0xA347, 0xB388, 0x9B07, 0x9B07,   // 0x0070 (112) pixels
0x9B07, 0x8AE6, 0x8AE6, 0x7265, 0x6A24, 0x2901, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x2901, 0x2901, 0x3142, 0x7265, 0x82A6, 0x7265,   // 0x0080 (128) pixels
0x8AE6, 0x9B07, 0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265, 0x7265, 0x7265, 0x5A04, 0x5A04, 0x3142, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x2901, 0x2901, 0x2901, 0x5A04, 0x7265, 0x5A04, 0x8AE6, 0x51E3, 0xAB68, 0x8AE6, 0x6A24, 0x8AE6, 0x49A3, 0x3962,   // 0x00A0 (160) pixels
0x5A04, 0x49A3, 0x5A04, 0x49A3, 0x49A3, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x3142, 0x3142, 0x49A3, 0x51E3, 0x5A04,   // 0x00B0 (176) pixels
0x51E3, 0x51E3, 0x9B07, 0x3142, 0x3962, 0x2901, 0x6A24, 0x49A3, 0x6A24, 0x49A3, 0x3962, 0x5A04, 0x3142, 0x3142, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3142, 0x3142, 0x2901, 0x49A3, 0x7265, 0x82A6, 0x51E3, 0x8AE6, 0x51E3, 0x6A24, 0x51E3, 0x3142, 0x3142, 0x6A24,   // 0x00D0 (208) pixels
0xA347, 0x6A24, 0x49A3, 0x6A24, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x3142, 0x5A04, 0x51E3, 0x7265, 0x8AE6,   // 0x00E0 (224) pixels
0xAB68, 0x51E3, 0xBBC9, 0x51E3, 0x9B07, 0x82A6, 0x51E3, 0x3142, 0x6A24, 0xA347, 0x8AE6, 0x6A24, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x49A3, 0x5A04, 0x5A04, 0x8AE6, 0xAB68, 0xB388, 0x82A6, 0xA347, 0x6A24, 0xA347, 0xBBC9, 0x51E3, 0xBBC9,   // 0x0100 (256) pixels
0x6A24, 0xA347, 0xA347, 0x82A6, 0x8AE6, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x3962, 0x7265, 0x7265, 0x9B07, 0xB388,   // 0x0110 (272) pixels
0xB388, 0xB388, 0x82A6, 0xA347, 0x82A6, 0x8AE6, 0x8AE6, 0x9B07, 0xA347, 0x8AE6, 0xB388, 0xB388, 0x9B07, 0x3962, 0x2901, 0x07FF,   // 0x0120 (288) pixels
0xB388, 0x0000, 0x3962, 0x3962, 0x7265, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347,   // 0x0130 (304) pixels
0xBBC9, 0xCC0A, 0xE4CD, 0xED0E, 0x9B07, 0x3962, 0x0000, 0x5A04, 0x82A6, 0xA347, 0x49A3, 0x5A04, 0x8AE6, 0x51E3, 0x0000, 0x51E3,   // 0x0140 (320) pixels
0xA347, 0xDC8C, 0xE4CD, 0xCC0A, 0xB388, 0xA347, 0xCC0A, 0xE4CD, 0xFD90, 0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x49A3, 0x3962, 0x5A04,   // 0x0150 (336) pixels
0x6A24, 0x82A6, 0x49A3, 0x5A04, 0x8AE6, 0x7A85, 0x7265, 0x51E3, 0x6A24, 0xB388, 0xFDD2, 0xB388, 0xCC0A, 0xF54F, 0xB388, 0xFDD2,   // 0x0160 (352) pixels
0xDC8C, 0xA347, 0x51E3, 0x0000, 0x51E3, 0x49A3, 0x3962, 0x5A04, 0x6A24, 0x5A04, 0x5A04, 0x5A04, 0x5A04, 0x3962, 0x2901, 0x2901,   // 0x0170 (368) pixels
0x2901, 0x2901, 0x6A24, 0x49A3, 0xA347, 0xA347, 0x49A3, 0x6A24, 0xB388, 0x6A24, 0x3962, 0x5A04, 0x3962, 0x5A04, 0x5A04, 0x5A04,   // 0x0180 (384) pixels
0x82A6, 0x5A04, 0x5A04, 0x82A6, 0x82A6, 0x2901, 0x0000, 0x0000, 0xB269, 0x78C3, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000,   // 0x0190 (400) pixels
0x0000, 0x0000, 0xB269, 0x78C3, 0x2901, 0x5A04, 0x5A04, 0x5A04, 0x8AE6, 0x5A04, 0x82A6, 0xB388, 0xB388, 0x8AE6, 0xAB68, 0x7BEC,   // 0x01A0 (416) pixels
0x6349, 0x6A24, 0x5A04, 0x6A24, 0xAB68, 0xAB68, 0x6A24, 0x5A04, 0x6A24, 0x6349, 0x7BEC, 0xAB68, 0x8AE6, 0x82A6, 0x5A04, 0x5A04,   // 0x01B0 (432) pixels
0x07FF, 0x8AE6, 0x82A6, 0xB388, 0xD44B, 0xD44B, 0xD44B, 0xA347, 0x8AE6, 0xAB68, 0xCC0A, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xCC0A,   // 0x01C0 (448) pixels
0xAB68, 0x8AE6, 0xA347, 0xD44B, 0xD44B, 0x82A6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0x9B07, 0xA347, 0xAB68, 0xA347, 0xD44B,   // 0x01D0 (464) pixels
0xFDF3, 0xE4CD, 0xFDD2, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xFDD2, 0xE4CD, 0xFDF3, 0xD44B, 0xA347, 0xAB68, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0x9B07, 0x8AE6, 0x8AE6, 0xBBC9, 0xFDD2, 0xD44B, 0xA347, 0x7265, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0x7265,   // 0x01F0 (496) pixels
0xA347, 0xD44B, 0xFDD2, 0xBBC9, 0x8AE6, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x9B07, 0xA347, 0x9B07, 0xD44B, 0xF54F,   // 0x0200 (512) pixels
0xA347, 0x8AE6, 0xA347, 0xA347, 0xE4CD, 0xE4CD, 0xA347, 0x8904, 0x8AE6, 0xA347, 0xF54F, 0xD44B, 0x9B07, 0x7265, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x07FF, 0x9B07, 0xCBE9, 0x8AE6, 0xE4CD, 0xE4CD, 0xA347, 0xCC0A, 0xDC8C, 0xA347, 0xB388, 0xB388, 0xAA28, 0x80E3,   // 0x0220 (544) pixels
0xCC0A, 0xA347, 0xE4CD, 0xE4CD, 0x8AE6, 0x5A04, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xA347, 0xD44B, 0xE4CD,   // 0x0230 (560) pixels
0xCC0A, 0xBAAA, 0xC30C, 0xFDF3, 0xD44B, 0xD44B, 0xCB4D, 0xB269, 0xD44B, 0xCC0A, 0xE4CD, 0xD44B, 0xA347, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0xAB68, 0x80E3, 0x78C3, 0x7A85, 0x5A04, 0x5A04, 0x9165, 0x9165,   // 0x0250 (592) pixels
0xAB68, 0xAB68, 0xD44B, 0xCBE9, 0xAB68, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x8AE6, 0xB388, 0xCBE9,   // 0x0260 (608) pixels
0xCBE9, 0xC30C, 0xC30C, 0xF54F, 0xFDD2, 0xFDD2, 0xF54F, 0xD44B, 0xCBE9, 0xCBE9, 0xCBE9, 0xB388, 0x8AE6, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x9B07, 0xCC0A, 0xDC8C, 0xB388, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68,   // 0x0280 (640) pixels
0xB388, 0xDC8C, 0xCC0A, 0x9B07, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347,   // 0x0290 (656) pixels
0xCC0A, 0xDC8C, 0xA347, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xA347, 0xDC8C, 0xCC0A, 0xA347, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0xA347, 0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B,   // 0x02B0 (688) pixels
};


const unsigned short DoomGuy_godmode[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x49A3, 0x5A04, 0x5A04, 0x5A04, 0x6A24, 0x7265, 0x7265, 0x7265, 0x7265, 0x7265, 0x6A24,   // 0x0010 (16) pixels
0x5A04, 0x5A04, 0x49A3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x5A04, 0x6A24,   // 0x0020 (32) pixels
0x8AE6, 0xBBC9, 0xB388, 0xCC0A, 0xCC0A, 0xB388, 0xAB68, 0x9B07, 0x7265, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x5A04, 0x7265, 0x8AE6, 0x9B07, 0xBBC9, 0xCBE9, 0xCC0A, 0xA347, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6,   // 0x0040 (64) pixels
0x8AE6, 0x7265, 0x7265, 0x51E3, 0x49A3, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07,   // 0x0050 (80) pixels
0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265, 0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x3962, 0x5A04, 0x7265, 0x5A04, 0x8AE6, 0x9B07, 0x8AE6, 0x8AE6, 0x8AE6, 0x8AE6, 0x49A3, 0x8AE6, 0x5A04, 0x49A3,   // 0x0070 (112) pixels
0x5A04, 0x49A3, 0x3142, 0x2901, 0x2901, 0x2901, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x49A3, 0x51E3, 0x5A04, 0x8AE6, 0x51E3,   // 0x0080 (128) pixels
0x9B07, 0x6A24, 0x6A24, 0x8AE6, 0x6A24, 0x49A3, 0x6A24, 0x49A3, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x3962, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x49A3, 0x49A3, 0x7265, 0x7265, 0x51E3, 0x8AE6, 0x51E3, 0x6A24, 0x7265, 0x6A24, 0x6A24, 0x8AE6, 0x8AE6, 0x8AE6,   // 0x00A0 (160) pixels
0x82A6, 0x82A6, 0x6A24, 0x49A3, 0x3962, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x51E3, 0x7265, 0x8AE6, 0x7265, 0x51E3,   // 0x00B0 (176) pixels
0xA347, 0x51E3, 0x7265, 0x8AE6, 0xA347, 0xB388, 0x9B07, 0xA347, 0x8AE6, 0x8AE6, 0x8AE6, 0x6A24, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x49A3, 0x5A04, 0x8AE6, 0xAB68, 0xB388, 0xA347, 0xA347, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xA347,   // 0x00D0 (208) pixels
0xA347, 0xB388, 0xAB68, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xCBE9, 0xCBE9,   // 0x00E0 (224) pixels
0xB388, 0xA347, 0xAB68, 0xAB68, 0xAB68, 0xAB68, 0xA347, 0xB388, 0xCBE9, 0xCBE9, 0xCC0A, 0x9B07, 0x5A04, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A,   // 0x0100 (256) pixels
0xE4CD, 0xED0E, 0xCC0A, 0x9B07, 0x7265, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0xB388, 0xE4CD, 0xFED8, 0xFD90,   // 0x0110 (272) pixels
0xE4CD, 0xE4CD, 0xCC0A, 0xD44B, 0xD44B, 0xCC0A, 0xE4CD, 0xE4CD, 0xFD90, 0xFED8, 0xE4CD, 0xB388, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x0120 (288) pixels
0xB388, 0x6A24, 0x49A3, 0x7265, 0x6A24, 0x6A24, 0x51E3, 0xA347, 0xDC8C, 0xB388, 0x7265, 0xB388, 0xB388, 0x7265, 0xB388, 0xDC8C,   // 0x0130 (304) pixels
0xA347, 0x51E3, 0x6A24, 0x6A24, 0x7265, 0x49A3, 0x6A24, 0xB388, 0xB388, 0x6A24, 0x4184, 0x8AE6, 0xAB68, 0xAB68, 0x9B07, 0x82A6,   // 0x0140 (320) pixels
0x7265, 0x6A24, 0x6A24, 0x8AE6, 0x8AE6, 0x6A24, 0x6A24, 0x7265, 0x82A6, 0x9B07, 0xAB68, 0xAB68, 0x8AE6, 0x4184, 0x6A24, 0xB388,   // 0x0150 (336) pixels
0x8AE6, 0x6A24, 0x6286, 0xB388, 0x7265, 0xC4C5, 0xFFFA, 0xFFFF, 0xD5C8, 0xC4C5, 0x9AC2, 0xD44B, 0xD44B, 0x9AC2, 0xC4C5, 0xD5C8,   // 0x0160 (352) pixels
0xFFFF, 0xFFFA, 0xC4C5, 0x7265, 0xB388, 0x6286, 0x6A24, 0x8AE6, 0x6A24, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0xC4C5, 0xD5C8,   // 0x0170 (368) pixels
0xC4C5, 0xABC3, 0x8AE6, 0xCC0A, 0xE4CD, 0x8AE6, 0xABC3, 0xC4C5, 0xD5C8, 0xC4C5, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x6A24,   // 0x0180 (384) pixels
0x82A6, 0x5A04, 0x82A6, 0xDBCF, 0xD44B, 0xBBC9, 0xAB68, 0x8AE6, 0xAB68, 0xCBE9, 0xD44B, 0xFD0B, 0xFD8F, 0xD44B, 0xCBE9, 0xAB68,   // 0x0190 (400) pixels
0x8AE6, 0xAB68, 0xBBC9, 0xD44B, 0xDBCF, 0x82A6, 0x5A04, 0x82A6, 0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCBE9,   // 0x01A0 (416) pixels
0xFD0B, 0xFDD2, 0xE4CD, 0xFD0B, 0xFD8F, 0xE4CD, 0xFDD2, 0xFD0B, 0xCBE9, 0xDC8C, 0xED0E, 0xDC8C, 0xCC0A, 0x8AE6, 0x5A04, 0x8AE6,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0x82A6, 0xA347, 0xAB68, 0xBBC9, 0xD44B, 0xFD0B, 0xFE34, 0xDC8C, 0xD44B, 0xFD8F, 0xFEB7, 0xD44B, 0xDC8C, 0xFE34,   // 0x01C0 (448) pixels
0xFD0B, 0xD44B, 0xBBC9, 0xAB68, 0xA347, 0x82A6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0x9B07, 0xA347, 0xBBC9, 0xED0E, 0xF54F,   // 0x01D0 (464) pixels
0xD44B, 0xAB68, 0x9B07, 0x9C0C, 0x9C0C, 0x9B07, 0xAB68, 0xD44B, 0xF54F, 0xED0E, 0xBBC9, 0xA347, 0x9B07, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0xB388, 0x9B07, 0xD44B, 0xFDD2, 0xE4CD, 0xBBC9, 0x51E3, 0x7265, 0x82A6, 0x82A6, 0x7265, 0x51E3, 0xBBC9,   // 0x01F0 (496) pixels
0xE4CD, 0xFDD2, 0xD44B, 0x9B07, 0xB388, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0xCBE9, 0x9B07, 0xE4CD, 0xF54F, 0xCC0A,   // 0x0200 (512) pixels
0xCC0A, 0xD44B, 0xBBC9, 0xA347, 0xA347, 0xBBC9, 0xD44B, 0xCC0A, 0xCC0A, 0xF54F, 0xE4CD, 0x9B07, 0xCBE9, 0x5A04, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x51E3, 0xAB68, 0xA347, 0xD44B, 0xE4CD, 0xCC0A, 0xD44B, 0xF54F, 0xFDF3, 0xDC8C, 0xDC8C, 0xFDF3, 0xF54F, 0xD44B,   // 0x0220 (544) pixels
0xCC0A, 0xE4CD, 0xD44B, 0xA347, 0xAB68, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0x8AE6,   // 0x0230 (560) pixels
0x7265, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x9AC2, 0x7265, 0x8AE6, 0xD44B, 0xCBE9, 0xAB68, 0x82A6, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x8AE6, 0xB388, 0xCBE9, 0xCBE9, 0xCBE9, 0xD44B, 0xE4CD, 0xFD0B, 0xFD0B, 0xE4CD, 0xD44B, 0xCBE9,   // 0x0250 (592) pixels
0xCBE9, 0xCBE9, 0xB388, 0x8AE6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
0xCBE9, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68, 0xCBE9, 0xDC8C, 0xCC0A, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCC0A, 0xDC8C, 0xCBE9, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xCBE9, 0xDC8C,   // 0x0280 (640) pixels
0xCC0A, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x82A6,   // 0x0290 (656) pixels
0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0xB388, 0x82A6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x6A24, 0x8AE6, 0xA347, 0xA347, 0xA347, 0xA347, 0x8AE6, 0x6A24,   // 0x02B0 (688) pixels
};


const unsigned short DoomGuy_afraid[696] PROGMEM={
0x07FF, 0x07FF, 0x3142, 0x5A04, 0x7265, 0x8AE6, 0x9B07, 0xBBC9, 0xCBE9, 0xCC0A, 0xA347, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6,   // 0x0010 (16) pixels
0x8AE6, 0x7265, 0x7265, 0x51E3, 0x49A3, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07,   // 0x0020 (32) pixels
0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265, 0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x2901, 0x3962, 0x5A04, 0x7265, 0x5A04, 0x8AE6, 0x51E3, 0xAB68, 0x8AE6, 0x6A24, 0x8AE6, 0x49A3, 0x3962, 0x5A04, 0x49A3,   // 0x0040 (64) pixels
0x5A04, 0x49A3, 0x3142, 0x2901, 0x2901, 0x2901, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x49A3, 0x51E3, 0x5A04, 0x51E3, 0x51E3,   // 0x0050 (80) pixels
0x9B07, 0x3142, 0x3962, 0x2901, 0x6A24, 0x49A3, 0x6A24, 0x49A3, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x3962, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x49A3, 0x49A3, 0x7265, 0x82A6, 0x51E3, 0x8AE6, 0x51E3, 0x6A24, 0x51E3, 0x3142, 0x3142, 0x6A24, 0xA347, 0x6A24,   // 0x0070 (112) pixels
0x49A3, 0x6A24, 0x51E3, 0x49A3, 0x3962, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x51E3, 0x7265, 0x8AE6, 0xAB68, 0x51E3,   // 0x0080 (128) pixels
0xBBC9, 0x51E3, 0x9B07, 0x82A6, 0x51E3, 0x3142, 0x6A24, 0xA347, 0x8AE6, 0x6A24, 0x8AE6, 0x51E3, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x49A3, 0x5A04, 0x8AE6, 0xAB68, 0xB388, 0x82A6, 0xA347, 0x6A24, 0xA347, 0xBBC9, 0x51E3, 0xBBC9, 0x6A24, 0xA347,   // 0x00A0 (160) pixels
0xA347, 0x82A6, 0xAB68, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xB388, 0xB388, 0xB388,   // 0x00B0 (176) pixels
0x82A6, 0xA347, 0x82A6, 0x8AE6, 0x8AE6, 0x9B07, 0xA347, 0x8AE6, 0xB388, 0xB388, 0x82A6, 0x9B07, 0x5A04, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD, 0xCC0A, 0xBBC9, 0xA347, 0x8AE6, 0x8AE6, 0xA347, 0xBBC9, 0xCC0A,   // 0x00D0 (208) pixels
0xE4CD, 0xED0E, 0xCC0A, 0x9B07, 0x7265, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x7265, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2,   // 0x00E0 (224) pixels
0xE4CD, 0xD44B, 0xB388, 0xD44B, 0xD44B, 0xCC0A, 0xAB68, 0xD44B, 0xED0E, 0xFDD2, 0xE4CD, 0xB388, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0xB388, 0x6A24, 0x49A3, 0x8AE6, 0x6A24, 0x6A24, 0x82A6, 0xCC0A, 0xFD90, 0xE4CD, 0xD44B, 0xB388, 0xB388, 0xCC0A, 0xE4CD, 0xDC8C,   // 0x0100 (256) pixels
0xA347, 0x51E3, 0x6A24, 0x6A24, 0x8AE6, 0x49A3, 0x6A24, 0xB388, 0xB388, 0x6A24, 0x4184, 0x7265, 0xDC8C, 0xAB68, 0x8AE6, 0x3962,   // 0x0110 (272) pixels
0x6A24, 0x82A6, 0xDC8C, 0xE4CD, 0xCC0A, 0xE4CD, 0xB388, 0x6A24, 0x3962, 0x8AE6, 0xAB68, 0xDC8C, 0x7265, 0x4184, 0x6A24, 0xB388,   // 0x0120 (288) pixels
0x8AE6, 0x6A24, 0x82A6, 0x6A24, 0x8AE6, 0x0000, 0x73AE, 0xA534, 0x3962, 0x49A3, 0x8AE6, 0xDC8C, 0xBBC9, 0x8AE6, 0x49A3, 0x3962,   // 0x0130 (304) pixels
0x73AE, 0xA534, 0x0000, 0x8AE6, 0x6A24, 0x82A6, 0x6A24, 0x8AE6, 0x6A24, 0x5A04, 0x82A6, 0x82A6, 0x51E3, 0x73AE, 0x49A3, 0x0000,   // 0x0140 (320) pixels
0xA534, 0x0000, 0x51E3, 0xA347, 0xF54F, 0x51E3, 0x0000, 0x73AE, 0x0000, 0x49A3, 0xA534, 0x51E3, 0x82A6, 0x82A6, 0x5A04, 0x6A24,   // 0x0150 (336) pixels
0x82A6, 0x5A04, 0x82A6, 0xCC0A, 0xB388, 0x5A04, 0x5ACB, 0x5ACB, 0xCC0A, 0xF54F, 0x8AE6, 0xBBC9, 0xE4CD, 0x8AE6, 0xF54F, 0xCC0A,   // 0x0160 (352) pixels
0x5ACB, 0x5ACB, 0x5A04, 0xB388, 0xCC0A, 0x82A6, 0x5A04, 0x82A6, 0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xE4CD, 0xB388, 0x5A04, 0x82A6,   // 0x0170 (368) pixels
0xCC0A, 0xFDD2, 0xD44B, 0xCC0A, 0xFD8F, 0xD44B, 0xFDD2, 0xCC0A, 0x82A6, 0x5A04, 0xB388, 0xE4CD, 0xCC0A, 0x8AE6, 0x5A04, 0x8AE6,   // 0x0180 (384) pixels
0x07FF, 0x5A04, 0x8AE6, 0xBBC9, 0xE4CD, 0xF54F, 0xF54F, 0xFDD2, 0xED0E, 0xB388, 0xE4CD, 0xD44B, 0xFD8F, 0xE4CD, 0xB388, 0xF54F,   // 0x0190 (400) pixels
0xED0E, 0xFDD2, 0xF54F, 0xE4CD, 0xBBC9, 0x8AE6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x8AE6, 0x8AE6, 0xB388, 0xAB68, 0xE4CD, 0xCC0A,   // 0x01A0 (416) pixels
0x8AE6, 0x5A04, 0x9B07, 0xB388, 0xB388, 0x9B07, 0x5A04, 0x8AE6, 0xCC0A, 0xE4CD, 0xAB68, 0xBBC9, 0x8AE6, 0x8AE6, 0x5A04, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0xA347, 0x7A85, 0x7A85, 0xA347, 0xE4CD, 0x8AE6, 0x82A6, 0x51E3, 0x7265, 0x82A6, 0x82A6, 0x7265, 0x51E3, 0x82A6,   // 0x01C0 (448) pixels
0x8AE6, 0xE4CD, 0xA347, 0x7A85, 0x7A85, 0xA347, 0x5A04, 0x07FF, 0x07FF, 0x07FF, 0x8AE6, 0x8AE6, 0x82A6, 0xA347, 0xD44B, 0x6A24,   // 0x01D0 (464) pixels
0xB388, 0xD44B, 0x9B07, 0x6A24, 0x6A24, 0x8904, 0xD44B, 0xB388, 0x6A24, 0xD44B, 0xA347, 0x82A6, 0xA347, 0x8AE6, 0x07FF, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7A85, 0xA347, 0x7A85, 0xA347, 0xCC0A, 0x7265, 0xB388, 0xF54F, 0xD44B, 0xD44B, 0xD44B, 0x80E3, 0xF54F, 0xB388,   // 0x01F0 (496) pixels
0x7265, 0xCC0A, 0xA347, 0x7A85, 0xBBC9, 0x7A85, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x8AE6, 0x7A85, 0x9B07, 0xBBC9, 0x9B07,   // 0x0200 (512) pixels
0xD44B, 0xAB68, 0x7265, 0x7265, 0x7265, 0xB269, 0xAB68, 0xD44B, 0x9B07, 0xBBC9, 0x9B07, 0x7A85, 0xA347, 0x07FF, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x07FF, 0x82A6, 0x7A85, 0x82A6, 0xBBC9, 0x9B07, 0xB388, 0x2965, 0x5ACB, 0x73AE, 0x73AE, 0x5ACB, 0x2965, 0xB388,   // 0x0220 (544) pixels
0x9B07, 0xBBC9, 0x82A6, 0x7A85, 0x82A6, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x7A85, 0x7A85, 0xA347, 0xAB68,   // 0x0230 (560) pixels
0x9B07, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9B07, 0xAB68, 0xA347, 0x7265, 0x7A85, 0x7265, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7A85, 0x7265, 0x8AE6, 0xBBC9, 0x82A6, 0x0000, 0x5820, 0x0000, 0x0000, 0x5820, 0x0000, 0x82A6,   // 0x0250 (592) pixels
0xBBC9, 0x8AE6, 0x7265, 0x7A85, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x7265, 0x82A6, 0xCC0A,   // 0x0260 (608) pixels
0xA347, 0x5ACB, 0x8945, 0x78C3, 0x78C3, 0x8945, 0x5ACB, 0xA347, 0xCC0A, 0x82A6, 0x7265, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x7A85, 0xB388, 0xAB68, 0x8AE6, 0x5ACB, 0x73AE, 0x73AE, 0x5ACB, 0x8AE6, 0xAB68,   // 0x0280 (640) pixels
0xB388, 0x7A85, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x8AE6,   // 0x0290 (656) pixels
0xAB68, 0xAB68, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0xAB68, 0xAB68, 0x8AE6, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0x9B07, 0xCBE9, 0xED0E, 0xFDF3, 0xFDF3, 0xED0E, 0xCBE9, 0x9B07,   // 0x02B0 (688) pixels
};

const unsigned short DoomGuy_grin2[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x5A04, 0x6A24, 0x7265, 0x8AE6, 0x9B07, 0x9B07, 0x9B07, 0x9B07, 0x8AE6, 0x7265,   // 0x0010 (16) pixels
0x6A24, 0x5A04, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x51E3, 0x6A24, 0x8AE6, 0x8AE6, 0xA347,   // 0x0020 (32) pixels
0xA347, 0xAB68, 0xAB68, 0xBBC9, 0xB388, 0xAB68, 0x9B07, 0x8AE6, 0x82A6, 0x7265, 0x7265, 0x6A24, 0x49A3, 0x3142, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x49A3, 0x8AE6, 0x8AE6, 0xA347, 0xA347, 0xB388, 0xB388, 0xBBC9, 0xBBC9, 0xBBC9, 0xBBC9, 0xB388, 0xA347,   // 0x0040 (64) pixels
0x8AE6, 0x8AE6, 0x82A6, 0x6A24, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x51E3, 0x5A04, 0x7265, 0x8AE6, 0x9B07,   // 0x0050 (80) pixels
0xBBC9, 0xCBE9, 0xCC0A, 0xA347, 0xB388, 0x9B07, 0x9B07, 0x9B07, 0x8AE6, 0x8AE6, 0x7265, 0x7265, 0x51E3, 0x2901, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x2901, 0x3142, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x9B07, 0xB388, 0x82A6, 0xAB68, 0x8AE6, 0xA347, 0x7265, 0x7265,   // 0x0070 (112) pixels
0x7265, 0x7265, 0x5A04, 0x51E3, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x2901, 0x2901, 0x5A04, 0x7265, 0x5A04, 0x8AE6,   // 0x0080 (128) pixels
0x51E3, 0xAB68, 0x8AE6, 0x6A24, 0x8AE6, 0x49A3, 0x3962, 0x5A04, 0x49A3, 0x5A04, 0x49A3, 0x3142, 0x2901, 0x3142, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x3142, 0x3142, 0x49A3, 0x51E3, 0x5A04, 0x51E3, 0x51E3, 0x9B07, 0x3142, 0x3962, 0x2901, 0x6A24, 0x49A3, 0x6A24,   // 0x00A0 (160) pixels
0x49A3, 0x3962, 0x5A04, 0x2901, 0x3142, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x2901, 0x49A3, 0x7265, 0x82A6, 0x51E3,   // 0x00B0 (176) pixels
0x8AE6, 0x51E3, 0x6A24, 0x51E3, 0x3142, 0x3142, 0x6A24, 0xA347, 0x6A24, 0x49A3, 0x6A24, 0x51E3, 0x49A3, 0x49A3, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3142, 0x5A04, 0x51E3, 0x7265, 0x8AE6, 0xAB68, 0x51E3, 0xBBC9, 0x51E3, 0x9B07, 0x82A6, 0x51E3, 0x3142, 0x6A24,   // 0x00D0 (208) pixels
0xA347, 0x8AE6, 0x6A24, 0x8AE6, 0x51E3, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x5A04, 0x5A04, 0x8AE6, 0xAB68, 0xB388,   // 0x00E0 (224) pixels
0x82A6, 0xA347, 0x6A24, 0xA347, 0xBBC9, 0x51E3, 0xBBC9, 0x6A24, 0xA347, 0xA347, 0x82A6, 0xAB68, 0x8AE6, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x7265, 0x9B07, 0xB388, 0xB388, 0xB388, 0x82A6, 0xA347, 0x82A6, 0x8AE6, 0x8AE6, 0x9B07, 0xA347,   // 0x0100 (256) pixels
0x8AE6, 0xB388, 0xB388, 0x82A6, 0x9B07, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x0000, 0x49A3, 0x7265, 0x9B07, 0xCC0A, 0xED0E, 0xE4CD,   // 0x0110 (272) pixels
0xCC0A, 0xBBC9, 0xA347, 0x7265, 0x7265, 0xA347, 0xBBC9, 0xCC0A, 0xE4CD, 0xED0E, 0xCC0A, 0x9B07, 0x7265, 0x3962, 0x0000, 0xB388,   // 0x0120 (288) pixels
0xB388, 0x3962, 0x49A3, 0x8AE6, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2, 0xFD90, 0xE4CD, 0xCC0A, 0xA347, 0xA347, 0xCC0A, 0xE4CD, 0xFD90,   // 0x0130 (304) pixels
0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x8AE6, 0x49A3, 0x3962, 0xB388, 0x8AE6, 0x3962, 0x49A3, 0xB388, 0x51E3, 0x51E3, 0x51E3, 0xA347,   // 0x0140 (320) pixels
0xDC8C, 0xFDD2, 0xB388, 0xCC0A, 0xF54F, 0xB388, 0xFDD2, 0xDC8C, 0xA347, 0x51E3, 0x51E3, 0x51E3, 0xB388, 0x49A3, 0x3962, 0x8AE6,   // 0x0150 (336) pixels
0x6A24, 0x5A04, 0x82A6, 0x8AE6, 0x3962, 0x3962, 0x3962, 0x6A24, 0xB388, 0x6A24, 0x49A3, 0xA347, 0xA347, 0x49A3, 0x6A24, 0xB388,   // 0x0160 (352) pixels
0x6A24, 0x3962, 0x3962, 0x3962, 0x8AE6, 0x82A6, 0x5A04, 0x6A24, 0x82A6, 0x5A04, 0x9B07, 0xE4CD, 0x7265, 0x7BEF, 0x0010, 0x0000,   // 0x0170 (368) pixels
0x52AA, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000, 0x52AA, 0x0000, 0x0010, 0x7BEF, 0x7265, 0xE4CD, 0x9B07, 0x5A04, 0x82A6,   // 0x0180 (384) pixels
0x8AE6, 0x5A04, 0xCBE9, 0xF54F, 0xE4CD, 0xAB68, 0xED0E, 0xAB68, 0x9B07, 0x5A04, 0x6A24, 0xAB68, 0xAB68, 0x6A24, 0x5A04, 0x9B07,   // 0x0190 (400) pixels
0xAB68, 0xED0E, 0xAB68, 0xE4CD, 0xF54F, 0xCBE9, 0x5A04, 0x8AE6, 0x07FF, 0x5A04, 0xCBE9, 0xF54F, 0xF54F, 0xE4CD, 0xE4CD, 0xE4CD,   // 0x01A0 (416) pixels
0xF54F, 0xD44B, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xD44B, 0xF54F, 0xE4CD, 0xE4CD, 0xE4CD, 0xF54F, 0xF54F, 0xCBE9, 0x5A04, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x82A6, 0xBBC9, 0xD44B, 0xE4CD, 0xCC0A, 0xBBC9, 0x8AE6, 0x5A04, 0xAB68, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0xAB68, 0x5A04,   // 0x01C0 (448) pixels
0x8AE6, 0xBBC9, 0xCC0A, 0xE4CD, 0xD44B, 0xCBE9, 0x82A6, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xE4CD, 0xA347, 0x39C7, 0x6A24,   // 0x01D0 (464) pixels
0x5A04, 0x7265, 0xA347, 0xE4CD, 0xE4CD, 0xA347, 0x7265, 0x5A04, 0x6A24, 0x39C7, 0xA347, 0xE4CD, 0xCBE9, 0xBBC9, 0x07FF, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x9B07, 0xCBE9, 0xD44B, 0xAB68, 0x6A24, 0x39C7, 0x8AE6, 0xBBC9, 0x82A6, 0x82A6, 0x82A6, 0x7000, 0xBBC9, 0x8AE6,   // 0x01F0 (496) pixels
0x39C7, 0x6A24, 0xAB68, 0xD44B, 0xCBE9, 0xAB68, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xCBE9, 0xD44B, 0xCBE9, 0x9B07, 0x630C,   // 0x0200 (512) pixels
0x4A69, 0x73AE, 0x7BEF, 0x9CF3, 0x9CF3, 0x7BEF, 0x73AE, 0x4A69, 0x630C, 0xB388, 0xCBE9, 0xD44B, 0xA347, 0x9B07, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x07FF, 0xA347, 0xCBE9, 0xD44B, 0xB388, 0xD44B, 0x630C, 0x630C, 0xAD55, 0xDEDB, 0xDEDB, 0xAD55, 0x630C, 0x630C,   // 0x0220 (544) pixels
0xD44B, 0xAB68, 0xD44B, 0xCBE9, 0x9B07, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCBE9, 0xB388, 0xAB68,   // 0x0230 (560) pixels
0xD44B, 0x630C, 0x73AE, 0x7BEF, 0x7BEF, 0x73AE, 0x630C, 0xD44B, 0xAB68, 0xB388, 0xCBE9, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xCBE9, 0xCBE9, 0x8AE6, 0xB388, 0xD44B, 0xFDD2, 0xFDD2, 0xD44B, 0xB388, 0x8AE6,   // 0x0250 (592) pixels
0xCBE9, 0xCBE9, 0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xCC0A, 0xDC8C,   // 0x0260 (608) pixels
0xCBE9, 0x8AE6, 0x5A04, 0x3962, 0x3962, 0x5A04, 0x8AE6, 0xCBE9, 0xDC8C, 0xCC0A, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xAB68, 0xDC8C, 0xCBE9, 0xAB68, 0x82A6, 0x82A6, 0xAB68, 0xCBE9, 0xDC8C,   // 0x0280 (640) pixels
0xAB68, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24,   // 0x0290 (656) pixels
0x8AE6, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0x8AE6, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x5A04, 0x8AE6, 0xB388, 0xB388, 0x8AE6, 0x5A04, 0x07FF,   // 0x02B0 (688) pixels
};

const unsigned short DoomGuy3_neutral[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x3142, 0x5A04, 0x51E3, 0x5A04, 0x7265, 0x7265, 0xAB68, 0x8AE6, 0x6A24, 0x8AE6, 0xAB68, 0x8AE6, 0x7265,   // 0x0010 (16) pixels
0x82A6, 0x82A6, 0x51E3, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x51E3, 0x6A24, 0x7265, 0x9B07, 0x8AE6,   // 0x0020 (32) pixels
0xA347, 0x9B07, 0xAB68, 0x8AE6, 0xAB68, 0xCC0A, 0xB388, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x6A24, 0x49A3, 0x3142, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x3142, 0x49A3, 0x7265, 0x9B07, 0x8AE6, 0xA347, 0xAB68, 0xB388, 0xBBC9, 0xBBC9, 0xBBC9, 0xAB68, 0xA347, 0x9B07,   // 0x0040 (64) pixels
0x7265, 0x7265, 0x7265, 0x8AE6, 0x51E3, 0x3962, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x49A3, 0x5A04, 0x8AE6, 0x8AE6, 0xA347, 0x9B07,   // 0x0050 (80) pixels
0xAB68, 0xBBC9, 0xDC8C, 0xDC8C, 0xDC8C, 0xCC0A, 0xAB68, 0x8AE6, 0x82A6, 0x82A6, 0x6A24, 0x82A6, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x49A3, 0x7265, 0x82A6, 0x8AE6, 0xA347, 0x9B07, 0xBBC9, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCC0A, 0xCC0A, 0xB388,   // 0x0070 (112) pixels
0x82A6, 0x8AE6, 0x7265, 0x51E3, 0x82A6, 0x49A3, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x51E3, 0x7265, 0x7A85, 0x8AE6, 0x8AE6, 0x6A24,   // 0x0080 (128) pixels
0x9B07, 0xB388, 0xCC0A, 0xDC8C, 0xCC0A, 0xB388, 0xA347, 0xCC0A, 0x8AE6, 0x7265, 0x8AE6, 0x51E3, 0x7265, 0x49A3, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x51E3, 0x7265, 0x7A85, 0x6A24, 0x6A24, 0x9B07, 0xAB68, 0xCC0A, 0xB388, 0xCC0A, 0xB388, 0xBBC9, 0xB388, 0x8AE6,   // 0x00A0 (160) pixels
0xCC0A, 0x7265, 0x8AE6, 0x51E3, 0x6A24, 0x3962, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3962, 0x51E3, 0x6A24, 0x3962, 0x6A24, 0x8AE6,   // 0x00B0 (176) pixels
0xCC0A, 0x9B07, 0xAB68, 0x9B07, 0x9B07, 0x9B07, 0xBBC9, 0x9B07, 0xB388, 0x5A04, 0x6A24, 0x49A3, 0x5A04, 0x3142, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3142, 0x3962, 0x3142, 0x49A3, 0x7A85, 0x8AE6, 0xAB68, 0x9B07, 0x8AE6, 0x6A24, 0x8AE6, 0x9B07, 0xAB68, 0x7A85,   // 0x00D0 (208) pixels
0x9B07, 0x51E3, 0x6A24, 0x49A3, 0x3142, 0x3962, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x3142, 0x3142, 0x49A3, 0x7265, 0xAB68,   // 0x00E0 (224) pixels
0x82A6, 0x82A6, 0x7A85, 0x3962, 0x7A85, 0x9B07, 0xA347, 0x5A04, 0x82A6, 0x49A3, 0x49A3, 0x3142, 0x3962, 0x49A3, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x3142, 0x2901, 0x3962, 0x49A3, 0x5A04, 0x8AE6, 0x7265, 0x8AE6, 0x5A04, 0x3962, 0x5A04, 0x7265, 0x9B07, 0x3142,   // 0x0100 (256) pixels
0x7265, 0x49A3, 0x3142, 0x5820, 0x5A04, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x2901, 0x49A3, 0x5A04, 0x7265, 0x3962, 0x5A04, 0x7265,   // 0x0110 (272) pixels
0x6A24, 0x8AE6, 0x51E3, 0x3142, 0x3962, 0x7265, 0x9B07, 0x5A04, 0x3142, 0x4000, 0x3142, 0x5820, 0x5A04, 0x49A3, 0x2901, 0xB388,   // 0x0120 (288) pixels
0xB388, 0x0000, 0x49A3, 0x7265, 0x9B07, 0x4800, 0x3962, 0x5A04, 0x5A04, 0x82A6, 0x3142, 0x4800, 0x3962, 0x51E3, 0x82A6, 0x3142,   // 0x0130 (304) pixels
0x4000, 0x6000, 0x7265, 0x78C3, 0x7265, 0x49A3, 0x0000, 0xB388, 0x8AE6, 0x3962, 0x49A3, 0x7265, 0x9B07, 0x5820, 0x4800, 0x3142,   // 0x0140 (320) pixels
0x51E3, 0x51E3, 0x3142, 0x4800, 0x3962, 0x51E3, 0x8AE6, 0x3142, 0x5020, 0x5020, 0x8AE6, 0x8904, 0x7265, 0x49A3, 0x3962, 0x8AE6,   // 0x0150 (336) pixels
0x6A24, 0x3962, 0x49A3, 0x8AE6, 0x8BAA, 0x8945, 0x5820, 0x5A04, 0x3142, 0x51E3, 0x3142, 0x6A24, 0x6A24, 0x3142, 0x7265, 0x5A04,   // 0x0160 (352) pixels
0x9986, 0x6041, 0x8BAA, 0xB269, 0x8AE6, 0x5A04, 0x3962, 0x6A24, 0x82A6, 0x5A04, 0x5A04, 0x8349, 0x8AE6, 0x78C3, 0x78C3, 0x8AE6,   // 0x0170 (368) pixels
0x3142, 0x51E3, 0x3142, 0x3142, 0x8AE6, 0xB388, 0x9B07, 0x9B07, 0x5820, 0x5820, 0x8AE6, 0x8AE6, 0x8349, 0x5A04, 0x5A04, 0x82A6,   // 0x0180 (384) pixels
0x8AE6, 0x5A04, 0x5A04, 0x8AE6, 0x5A04, 0xB269, 0x5820, 0x0000, 0x0000, 0x5820, 0x49A3, 0x51E3, 0x3142, 0x49A3, 0x5820, 0x0000,   // 0x0190 (400) pixels
0x0000, 0x5820, 0xAA28, 0x5A04, 0x8AE6, 0x82A6, 0x5A04, 0x8AE6, 0x07FF, 0x5A04, 0x82A6, 0xB388, 0x8BAA, 0x6A24, 0x5820, 0x49A3,   // 0x01A0 (416) pixels
0x6A24, 0x5A04, 0x6A24, 0x8AE6, 0x8AE6, 0x6A24, 0x5A04, 0x6A24, 0x5820, 0x5820, 0x6A24, 0x8BAA, 0xB388, 0x82A6, 0x5A04, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0x82A6, 0xBBC9, 0x8BAA, 0x8AE6, 0x78C3, 0x6A24, 0x8AE6, 0xCBE9, 0xD44B, 0xF54F, 0xFDD2, 0xD44B, 0xCBE9, 0x8AE6,   // 0x01C0 (448) pixels
0x80E3, 0x80E3, 0x8AE6, 0x8BAA, 0xBBC9, 0x7265, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0xA347, 0xD44B, 0xD38E, 0xD38E, 0xED0E,   // 0x01D0 (464) pixels
0xF54F, 0xE4CD, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xE4CD, 0xF54F, 0xDC30, 0xBACB, 0xFE34, 0xD44B, 0xA347, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0x8AE6, 0x8AE6, 0xC30C, 0xDC8C, 0xF54F, 0xDC8C, 0xB388, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0xB388, 0xDC8C,   // 0x01F0 (496) pixels
0xBAAA, 0xB269, 0xBBC9, 0x8AE6, 0x8AE6, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0xA347, 0x9B07, 0xA1E7, 0xDC8C, 0xDC8C,   // 0x0200 (512) pixels
0xB269, 0x7265, 0xB388, 0xE4CD, 0xE4CD, 0xA347, 0x7265, 0xB269, 0xA1E7, 0xA1E7, 0xBBC9, 0x9B07, 0xA347, 0x7265, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x07FF, 0x8AE6, 0xA347, 0xBBC9, 0xB269, 0xCC0A, 0x9165, 0x5820, 0x7265, 0xD44B, 0xD44B, 0x7265, 0x5820, 0x9165,   // 0x0220 (544) pixels
0x9986, 0x9986, 0xBBC9, 0xA347, 0x8AE6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x8AE6, 0xB388, 0x80E3, 0xBAAA,   // 0x0230 (560) pixels
0x6861, 0x70A2, 0x5820, 0x5A04, 0x5A04, 0x6861, 0x6861, 0x6861, 0x8945, 0x8945, 0xB388, 0x8AE6, 0x6A24, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xB388, 0x78C3, 0xAA28, 0xAA28, 0x5020, 0x7000, 0x80E3, 0x80E3, 0x7000, 0x78C3, 0xA1C7,   // 0x0250 (592) pixels
0xAA28, 0x9165, 0x9B07, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x9B07, 0x78C3, 0xBAAA,   // 0x0260 (608) pixels
0xB269, 0x9986, 0xAA28, 0xCB4D, 0xCB4D, 0xAA28, 0x9986, 0x9165, 0xBAAA, 0x9165, 0x82A6, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x78C3, 0xB388, 0xDC8C, 0x9986, 0x9165, 0x8945, 0x8904, 0x9986, 0xA1E7, 0xDC8C,   // 0x0280 (640) pixels
0xB388, 0x9165, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347,   // 0x0290 (656) pixels
0xB388, 0x9165, 0xB269, 0xD38E, 0xD38E, 0xB269, 0xB269, 0xCC0A, 0xA347, 0x9165, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x6A24, 0x8945, 0x9165, 0xA1E7, 0xA1E7, 0x9165, 0xB269, 0xA347,   // 0x02B0 (688) pixels
};


const unsigned short DoomGuy3_side[696] PROGMEM={
0x07FF, 0x07FF, 0x07FF, 0x3142, 0x51E3, 0x5A04, 0x7265, 0x7265, 0xAB68, 0x8AE6, 0x6A24, 0x8AE6, 0xAB68, 0x8AE6, 0x7265, 0x82A6,   // 0x0010 (16) pixels
0x82A6, 0x51E3, 0x5A04, 0x5A04, 0x3142, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x3142, 0x6A24, 0x7265, 0x9B07, 0x8AE6, 0xA347,   // 0x0020 (32) pixels
0x9B07, 0xAB68, 0x8AE6, 0xAB68, 0xCC0A, 0xB388, 0x7265, 0x82A6, 0x7265, 0x8AE6, 0x6A24, 0x6A24, 0x49A3, 0x3142, 0x07FF, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x49A3, 0x7265, 0x9B07, 0x8AE6, 0xA347, 0xAB68, 0xB388, 0xBBC9, 0xBBC9, 0xBBC9, 0xAB68, 0xA347, 0x9B07, 0x7265,   // 0x0040 (64) pixels
0x7265, 0x7265, 0x8AE6, 0x49A3, 0x3962, 0x2901, 0x07FF, 0x07FF, 0x07FF, 0x2901, 0x5A04, 0x8AE6, 0x8AE6, 0xA347, 0x9B07, 0xAB68,   // 0x0050 (80) pixels
0xBBC9, 0xDC8C, 0xDC8C, 0xDC8C, 0xCC0A, 0xAB68, 0x8AE6, 0x82A6, 0x82A6, 0x6A24, 0x82A6, 0x49A3, 0x3962, 0x2901, 0x2901, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x2901, 0x7265, 0x82A6, 0x8AE6, 0xA347, 0x9B07, 0xBBC9, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCC0A, 0xCC0A, 0xB388, 0x82A6,   // 0x0070 (112) pixels
0x8AE6, 0x7265, 0x51E3, 0x49A3, 0x3962, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x7265, 0x7A85, 0x8AE6, 0x8AE6, 0x6A24, 0x9B07,   // 0x0080 (128) pixels
0xB388, 0xCC0A, 0xDC8C, 0xCC0A, 0xB388, 0xA347, 0xCC0A, 0x8AE6, 0x7265, 0x8AE6, 0x51E3, 0x49A3, 0x3962, 0x3142, 0x2901, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x2901, 0x7265, 0x7A85, 0x6A24, 0x6A24, 0x9B07, 0xAB68, 0xCC0A, 0xB388, 0xCC0A, 0xB388, 0xBBC9, 0xB388, 0x8AE6, 0xCC0A,   // 0x00A0 (160) pixels
0x7265, 0x8AE6, 0x51E3, 0x49A3, 0x3962, 0x3142, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x51E3, 0x6A24, 0x3962, 0x6A24, 0x8AE6, 0xCC0A,   // 0x00B0 (176) pixels
0x9B07, 0xAB68, 0x9B07, 0x9B07, 0x9B07, 0xBBC9, 0x9B07, 0xB388, 0x5A04, 0x6A24, 0x49A3, 0x3962, 0x3142, 0x3142, 0x2901, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x2901, 0x3962, 0x3142, 0x49A3, 0x7A85, 0x8AE6, 0xAB68, 0x9B07, 0x8AE6, 0x6A24, 0x8AE6, 0x9B07, 0xAB68, 0x7A85, 0x9B07,   // 0x00D0 (208) pixels
0x51E3, 0x6A24, 0x49A3, 0x3142, 0x3962, 0x3962, 0x2901, 0x07FF, 0x07FF, 0x2901, 0x3142, 0x3142, 0x49A3, 0x7265, 0xAB68, 0x82A6,   // 0x00E0 (224) pixels
0x82A6, 0x7A85, 0x3962, 0x7A85, 0x9B07, 0xA347, 0x5A04, 0x82A6, 0x49A3, 0x49A3, 0x3142, 0x3142, 0x3962, 0x3962, 0x2901, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x2901, 0x2901, 0x3962, 0x49A3, 0x5A04, 0x8AE6, 0x7265, 0x8AE6, 0x5A04, 0x3962, 0x5A04, 0x7265, 0x9B07, 0x3142, 0x7265,   // 0x0100 (256) pixels
0x49A3, 0x3142, 0x49A3, 0x5A04, 0x49A3, 0x3962, 0x2901, 0x07FF, 0x5A04, 0x2901, 0x5A04, 0x7265, 0x3962, 0x5A04, 0x7265, 0x6A24,   // 0x0110 (272) pixels
0x8AE6, 0x51E3, 0x5A04, 0x3962, 0x7265, 0x9B07, 0x5A04, 0x3142, 0x5A04, 0x3142, 0x5820, 0x7A85, 0x49A3, 0x3962, 0x6A24, 0x8AE6,   // 0x0120 (288) pixels
0x5A04, 0x0000, 0x7265, 0x9B07, 0x4800, 0x3962, 0x5A04, 0x5A04, 0x82A6, 0x3142, 0x4800, 0x3962, 0x51E3, 0x82A6, 0x3142, 0x5A04,   // 0x0130 (304) pixels
0x3142, 0x5A04, 0x78C3, 0x7265, 0x5A04, 0x49A3, 0xB388, 0x82A6, 0x5A04, 0x3962, 0x7265, 0xB388, 0x5820, 0x4800, 0x3142, 0x51E3,   // 0x0140 (320) pixels
0x51E3, 0x3142, 0x4800, 0x3962, 0x51E3, 0x8AE6, 0x3142, 0x7082, 0x8945, 0x8AE6, 0x8904, 0x7265, 0x5A04, 0xD44B, 0x82A6, 0x6A24,   // 0x0150 (336) pixels
0x5A04, 0x3962, 0x7265, 0x5A04, 0x8945, 0x5820, 0x4800, 0x5A04, 0x3142, 0x3142, 0x6A24, 0x6A24, 0x3142, 0x7265, 0x5A04, 0x9986,   // 0x0160 (352) pixels
0x8945, 0xE4CD, 0xB269, 0x8AE6, 0x82A6, 0xA347, 0x5A04, 0x6A24, 0x5A04, 0x5A04, 0x7265, 0x9B07, 0x78C3, 0x78C3, 0x49A3, 0x7265,   // 0x0170 (368) pixels
0x51E3, 0x3142, 0x3142, 0x8AE6, 0xB388, 0x9B07, 0x9B07, 0x5820, 0x5820, 0x8AE6, 0x8AE6, 0x8AE6, 0x82A6, 0x82A6, 0x5A04, 0x82A6,   // 0x0180 (384) pixels
0x5A04, 0x5A04, 0x7265, 0x5A04, 0x0000, 0x0000, 0x80E3, 0xC30C, 0x0000, 0x49A3, 0x3142, 0x51E3, 0x49A3, 0x0000, 0x0000, 0x5020,   // 0x0190 (400) pixels
0xB269, 0xB269, 0x5A04, 0x8AE6, 0x82A6, 0x82A6, 0xB388, 0x8AE6, 0x07FF, 0x5A04, 0x7265, 0x9B07, 0x6A24, 0x5820, 0x6A24, 0x6A24,   // 0x01A0 (416) pixels
0x5A04, 0x6A24, 0x8AE6, 0x8AE6, 0x6A24, 0x5A04, 0x6A24, 0x5820, 0x5820, 0x6A24, 0x8AE6, 0xB388, 0x8AE6, 0x82A6, 0x8AE6, 0x07FF,   // 0x01B0 (432) pixels
0x07FF, 0x5A04, 0x7265, 0xAB68, 0x9B07, 0x78C3, 0x6A24, 0x8AE6, 0xCBE9, 0xD44B, 0xFDD2, 0xF54F, 0xD44B, 0xCBE9, 0x8AE6, 0x80E3,   // 0x01C0 (448) pixels
0x80E3, 0xCC0A, 0xED0E, 0xBBC9, 0x8AE6, 0x7265, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0xD44B, 0xFE34, 0xD38E, 0xED0E, 0xF54F,   // 0x01D0 (464) pixels
0xE4CD, 0xE4CD, 0xFDD2, 0xFDD2, 0xD44B, 0xE4CD, 0xF54F, 0xD38E, 0xC30C, 0xFE34, 0xD44B, 0xA347, 0x7265, 0x7265, 0x5A04, 0x07FF,   // 0x01E0 (480) pixels
0x07FF, 0x07FF, 0x7265, 0xD44B, 0xD38E, 0xDC8C, 0xF54F, 0xDC8C, 0xCC0A, 0xD44B, 0xFE34, 0xED0E, 0xD44B, 0x8AE6, 0xB388, 0xB269,   // 0x01F0 (496) pixels
0xB269, 0xDC8C, 0x8AE6, 0x8AE6, 0x7265, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0xAB68, 0xBACB, 0xDC8C, 0xDC8C, 0xB269,   // 0x0200 (512) pixels
0x7265, 0xA347, 0xE4CD, 0xDC8C, 0xB388, 0x7265, 0xB269, 0xA1E7, 0xA1E7, 0xBBC9, 0x9B07, 0xA347, 0x7265, 0x6A24, 0x07FF, 0x07FF,   // 0x0210 (528) pixels
0x07FF, 0x07FF, 0x51E3, 0xA347, 0xD44B, 0xBACB, 0xCC0A, 0x9165, 0x5820, 0x7265, 0xD44B, 0xD44B, 0x7265, 0x5820, 0x9165, 0x9986,   // 0x0220 (544) pixels
0x9986, 0xBBC9, 0xA347, 0x8AE6, 0x7A85, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x49A3, 0x8AE6, 0xB388, 0xB269, 0xBAAA, 0x6861,   // 0x0230 (560) pixels
0x70A2, 0x5820, 0x5A04, 0x5A04, 0x6861, 0x6861, 0x6861, 0x8945, 0x8945, 0xB388, 0x8AE6, 0x82A6, 0x6A24, 0x07FF, 0x07FF, 0x07FF,   // 0x0240 (576) pixels
0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xB388, 0x78C3, 0xAA28, 0xAA28, 0x5020, 0x4000, 0x5A04, 0x5A04, 0x78C3, 0x78C3, 0xA1C7, 0xAA28,   // 0x0250 (592) pixels
0x9165, 0xB388, 0x82A6, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0x9B07, 0x78C3, 0xBAAA, 0xB269,   // 0x0260 (608) pixels
0x9986, 0xAA28, 0xCB4D, 0xCB4D, 0xAA28, 0x9986, 0x9165, 0xBAAA, 0x9165, 0x9B07, 0x6A24, 0x3962, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0270 (624) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x78C3, 0xB388, 0xDC8C, 0x9986, 0x9165, 0x8945, 0x8904, 0x9986, 0xA1E7, 0xDC8C, 0xDC8C,   // 0x0280 (640) pixels
0x9165, 0x6A24, 0x3962, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347, 0xB388,   // 0x0290 (656) pixels
0x9165, 0xB269, 0xD38E, 0xD38E, 0xB269, 0xB269, 0xCC0A, 0xA347, 0x9165, 0x3962, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x02A0 (672) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0xA347, 0x8945, 0x9165, 0xA1E7, 0xA1E7, 0x9165, 0x8945, 0xA347, 0x51E3,   // 0x02B0 (688) pixels
};


const unsigned short DoomGuy_Eye1[168] PROGMEM={
0x07FF, 0x2901, 0x49A3, 0x7265, 0xB388, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xE4CD, 0xCC0A, 0xD44B, 0xD44B, 0xCC0A, 0xE4CD, 0xE4CD,   // 0x0010 (16) pixels
0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x7265, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x6A24, 0x49A3, 0x7265, 0x6A24, 0x6A24, 0x51E3, 0xA347,   // 0x0020 (32) pixels
0xDC8C, 0xB388, 0x7265, 0xB388, 0xB388, 0x7265, 0xB388, 0xDC8C, 0xA347, 0x51E3, 0x6A24, 0x6A24, 0x7265, 0x49A3, 0x6A24, 0xB388,   // 0x0030 (48) pixels
0xB388, 0x6A24, 0x4184, 0x8AE6, 0xAB68, 0x5A04, 0x3962, 0x3962, 0x3962, 0x49A3, 0x3962, 0x8AE6, 0x8AE6, 0x3962, 0x49A3, 0x3962,   // 0x0040 (64) pixels
0x3962, 0x3962, 0x5A04, 0xAB68, 0x8AE6, 0x4184, 0x6A24, 0xB388, 0x8AE6, 0x6A24, 0x6286, 0xB388, 0x7265, 0x6B4D, 0x0000, 0x6B4D,   // 0x0050 (80) pixels
0x39C7, 0x0000, 0x51E3, 0xD44B, 0xD44B, 0x51E3, 0x0000, 0x6B4D, 0x0000, 0x6B4D, 0xB596, 0x7265, 0xB388, 0x6286, 0x6A24, 0x8AE6,   // 0x0060 (96) pixels
0x6A24, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0xECB2, 0xBAAA, 0x6A24, 0x5A04, 0x8AE6, 0xCC0A, 0xE4CD, 0x8AE6, 0x5A04, 0x6A24,   // 0x0070 (112) pixels
0xBAAA, 0xECB2, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x6A24, 0x82A6, 0x5A04, 0x82A6, 0xDBCF, 0xD44B, 0xBBC9, 0xAB68, 0x8AE6,   // 0x0080 (128) pixels
0xAB68, 0xCBE9, 0xD44B, 0xFD0B, 0xFD8F, 0xD44B, 0xCBE9, 0xAB68, 0x8AE6, 0xAB68, 0xBBC9, 0xD44B, 0xDBCF, 0x82A6, 0x5A04, 0x82A6,   // 0x0090 (144) pixels
0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCBE9, 0xFD0B, 0xFDD2, 0xE4CD, 0xFD0B, 0xFD8F, 0xE4CD, 0xFDD2, 0xFD0B,   // 0x00A0 (160) pixels
};

const unsigned short DoomGuy_Eye2[168] PROGMEM={
0x07FF, 0x2901, 0x49A3, 0x7265, 0x3962, 0x0000, 0x51E3, 0x9B07, 0xE4CD, 0xE4CD, 0xCC0A, 0xD44B, 0xD44B, 0xCC0A, 0xE4CD, 0xE4CD,   // 0x0010 (16) pixels
0xFDD2, 0xFDD2, 0xE4CD, 0xB388, 0x7265, 0x49A3, 0x2901, 0x07FF, 0xB388, 0x6A24, 0x49A3, 0x7265, 0x82A6, 0x7265, 0x3962, 0x0000,   // 0x0020 (32) pixels
0x9B07, 0xFDD2, 0xBBC9, 0xF54F, 0xF54F, 0xBBC9, 0xFDD2, 0xDC8C, 0xA347, 0x51E3, 0x3962, 0x3962, 0x7265, 0x49A3, 0x6A24, 0xB388,   // 0x0030 (48) pixels
0xB388, 0x6A24, 0x4184, 0x8AE6, 0xB388, 0x5A04, 0x3962, 0x0000, 0x0000, 0x0000, 0x5A04, 0xAB68, 0xAB68, 0x5A04, 0x0000, 0x3962,   // 0x0040 (64) pixels
0x3962, 0x3962, 0x5A04, 0x82A6, 0xB388, 0x4184, 0x6A24, 0xB388, 0x8AE6, 0x6A24, 0x6286, 0xB388, 0x7265, 0x0000, 0x0000, 0x9CF3,   // 0x0050 (80) pixels
0x52AA, 0x0000, 0x49A3, 0x51E3, 0x51E3, 0x49A3, 0x0000, 0x0000, 0x0000, 0x9CF3, 0x7BEF, 0x7265, 0xB388, 0x6286, 0x6A24, 0x8AE6,   // 0x0060 (96) pixels
0x6A24, 0x5A04, 0x82A6, 0xB388, 0x8AE6, 0xAB68, 0xED0E, 0xAB68, 0x6A24, 0x5A04, 0x8AE6, 0xCC0A, 0xCC0A, 0x8AE6, 0x5A04, 0x6A24,   // 0x0070 (112) pixels
0xAB68, 0xED0E, 0xAB68, 0x8AE6, 0xB388, 0x82A6, 0x5A04, 0x6A24, 0x82A6, 0x5A04, 0x82A6, 0xD44B, 0xD44B, 0xBBC9, 0xAB68, 0x8AE6,   // 0x0080 (128) pixels
0xAB68, 0xCC0A, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xCC0A, 0xAB68, 0x8AE6, 0xAB68, 0xBBC9, 0xD44B, 0xD44B, 0x82A6, 0x5A04, 0x82A6,   // 0x0090 (144) pixels
0x8AE6, 0x5A04, 0x8AE6, 0xCC0A, 0xDC8C, 0xED0E, 0xDC8C, 0xCBE9, 0xE4CD, 0xFDD2, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0xFDD2, 0xE4CD,   // 0x00A0 (160) pixels
};

const unsigned short DoomGuy_Mouth[288] PROGMEM={
0x07FF, 0x5A04, 0x82A6, 0xD44B, 0xD44B, 0xA347, 0xD44B, 0xE4CD, 0xF54F, 0xD44B, 0xAB68, 0xF54F, 0xF54F, 0xAB68, 0xD44B, 0xF54F,   // 0x0010 (16) pixels
0xE4CD, 0xD44B, 0xA347, 0xD44B, 0xD44B, 0x82A6, 0x5A04, 0x07FF, 0x07FF, 0x5A04, 0x7265, 0xA347, 0xAB68, 0xBBC9, 0xFDD2, 0xD44B,   // 0x0020 (32) pixels
0xA347, 0x7265, 0xE4CD, 0xFDD2, 0xFDD2, 0xE4CD, 0x7265, 0xA347, 0xD44B, 0xFDD2, 0xBBC9, 0xAB68, 0xA347, 0x7265, 0x5A04, 0x07FF,   // 0x0030 (48) pixels
0x07FF, 0x07FF, 0x7265, 0x8AE6, 0x8AE6, 0xD44B, 0xF54F, 0xA347, 0x8AE6, 0xA347, 0xD44B, 0xFE34, 0xFE34, 0xD44B, 0xA347, 0x8AE6,   // 0x0040 (64) pixels
0xA347, 0xF54F, 0xD44B, 0x8AE6, 0x8AE6, 0x7265, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x7265, 0xA347, 0x9B07, 0xE4CD, 0xE4CD, 0xA347,   // 0x0050 (80) pixels
0xCC0A, 0xDC8C, 0xA347, 0xE4CD, 0xE4CD, 0xA347, 0xDC8C, 0xCC0A, 0xA347, 0xE4CD, 0xE4CD, 0x9B07, 0xA347, 0x7265, 0x07FF, 0x07FF,   // 0x0060 (96) pixels
0x07FF, 0x07FF, 0x5A04, 0xCBE9, 0x8AE6, 0xD44B, 0xE4CD, 0x7265, 0xB388, 0xCBE9, 0xCC0A, 0xB388, 0xB388, 0xCC0A, 0xCBE9, 0xB388,   // 0x0070 (112) pixels
0x7265, 0xE4CD, 0xD44B, 0x8AE6, 0xCBE9, 0x5A04, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0xAB68, 0xA347, 0xCBE9, 0xD44B, 0x5A04,   // 0x0080 (128) pixels
0x2124, 0x4208, 0x630C, 0x73AE, 0x73AE, 0x630C, 0x4208, 0x2124, 0x5A04, 0xD44B, 0xCBE9, 0xA347, 0xAB68, 0x07FF, 0x07FF, 0x07FF,   // 0x0090 (144) pixels
0x07FF, 0x07FF, 0x07FF, 0x82A6, 0xAB68, 0xCBE9, 0xD44B, 0x7265, 0x2124, 0x94B2, 0xCE59, 0xDEDB, 0xDEDB, 0xCE59, 0x94B2, 0x2124,   // 0x00A0 (160) pixels
0x7265, 0xD44B, 0xCBE9, 0xAB68, 0x82A6, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x8AE6, 0xB388, 0xCBE9, 0xA347,   // 0x00B0 (176) pixels
0xCBE9, 0xD44B, 0xF54F, 0xFDD2, 0xFDD2, 0xF54F, 0xD44B, 0xCBE9, 0xA347, 0xCBE9, 0xB388, 0x8AE6, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x00C0 (192) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0x9B07, 0xCC0A, 0xA347, 0x8AE6, 0x8AE6, 0x8AE6, 0x7A85, 0x7A85, 0x8AE6, 0x8AE6, 0x8AE6,   // 0x00D0 (208) pixels
0xA347, 0xCC0A, 0x9B07, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x6A24, 0xA347, 0xCC0A,   // 0x00E0 (224) pixels
0x8AE6, 0xA347, 0xCBE9, 0xE4CD, 0xE4CD, 0xCBE9, 0xA347, 0x8AE6, 0xCC0A, 0xA347, 0x6A24, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x00F0 (240) pixels
0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x51E3, 0xA347, 0xB388, 0xD44B, 0xE4CD, 0xFDF3, 0xFDF3, 0xE4CD, 0xD44B, 0xB388,   // 0x0100 (256) pixels
0xA347, 0x51E3, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0110 (272) pixels
0x8AE6, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0xB388, 0x8AE6, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF, 0x07FF,   // 0x0120 (288) pixels
};

#define FACE1_NEUTRAL1 		0
#define FACE1_NEUTRAL2 		1
#define FACE1_LEFT 			2
#define FACE1_RIGHT 		3
#define FACE2_NEUTRAL1 		4
#define FACE2_NEUTRAL2 		5
#define FACE2_LEFT 			6
#define FACE2_RIGHT 		7
#define FACE3_NEUTRAL1 		8
#define FACE3_NEUTRAL2 		9
#define FACE3_LEFT			10
#define FACE3_RIGHT 		11
#define FACE_GRIN 			12
#define FACE_SUPRISED		13
#define FACE_GOD			14


#define FACE_MODE_NORMAL		0
#define FACE_MODE_WOUNDED		1
#define FACE_MODE_BADLYWOUNDED	2
#define FACE_MODE_GOD			3
#define FACE_MODE_SUPRISED		4
#define FACE_MODE_GRIN			5
char Face_Mode = 0;

//Configuration of Face Appearence
#define FACE_X			50
#define FACE_Y			204
#define FACE_ATIME		2000


char Face_State = 0;



//Timer
unsigned long time;

void drawImg(int x,int y,int w,int h,const unsigned short *bmp,int alpha,bool dontflip, int bg_col = 0, int size = 4);

void setup()
{

	//Screen Stuff
    uint16_t ID;
    ID = tft.readID();
    if (ID == 0x0D3D3) ID = 0x9481;

    tft.begin(ID);
    tft.setRotation(3);
    tft.setTextColor(TEXT_COL, BG_COL);
    tft.setTextSize(3);
    tft.fillScreen(BLACK);

    drawImg(150,75,24,29,DoomGuy1_neutral, ALPHA_COL, true,BLACK, 6);

    tft.setCursor(0, 0);
    tft.print("GET READY ...");

	// StartUp Serial Connection
	Serial.begin(115200);
    while (!Serial) {
    ; // wait for serial port to connect. Needed for Native USB only
    }

   State = STATE_WAIT;
}




// The loop function is called in an endless loop
void loop()
{


	if(State == STATE_WAIT)
	{
		bool SerialConnected = false;

		while(Serial.available())
		{
			Serial.read(); // Clear Serial Buffer
			SerialConnected = true;
		}


		if(SerialConnected)
		{
			tft.fillRect(0,0, MAX_X, 102, BG_COL);
			tft.fillRect(0,102, MAX_X, 102,BG_COL);
			tft.fillRect(0, 194, MAX_X, 126, BLACK);

			tft.fillRect(190,216,280,110,BG_COL);
			State = STATE_RUN;
			SetFaceMode(FACE_MODE_NORMAL);
		}

		time = millis();
	}
	else if(State == STATE_RUN)
	{
		int WAITING = true;
		int CHAR_CNT = 0;
		char REC_MSG[16];
		strcpy(REC_MSG, "            ");

		  while(Serial.available())
		  {
			  char input = Serial.read();
			  REC_MSG[CHAR_CNT] = input;
			  CHAR_CNT++;
			  WAITING = false;
		  }

		  if(WAITING == false)
		  {
			  tft.setCursor(0, 0);
			  tft.setTextSize(1);
			  tft.print(REC_MSG[0]);
			  tft.setTextSize(3);

			  if(CPU_TEMP == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int temp = atoi(REC_MSG);

				  tft.setCursor(30, 73);
				  tft.print("CPU TEMP ");
				  tft.print(temp);
				  tft.print("C");

				  temp = temp-20; //Offset

				  if(CPU_HIST_CNT > 0){

					  	  temp = MAX(CPU_TEMP_HIST[CPU_HIST_CNT-1]-3, temp);
					  	  temp = MIN(CPU_TEMP_HIST[CPU_HIST_CNT-1]+3, temp);
				  }

				  if(CPU_HIST_CNT<HIST_LEN-1)
				  {
					CPU_TEMP_HIST[CPU_HIST_CNT] = (short) temp;
					CPU_HIST_CNT++;
				  }
				  else
				  {
					  for(int i=0; i < CPU_HIST_CNT-1; i++)
					  {
						  CPU_TEMP_HIST[i] = CPU_TEMP_HIST[i+1];
					  }
					  CPU_TEMP_HIST[CPU_HIST_CNT-1] = (short) temp;
				  }
				  RenderGraph(30,0,70,60,CPU_TEMP_HIST,CPU_HIST_CNT);
			  }
			  else if(GPU_TEMP == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int temp = atoi(REC_MSG);

				  short temp_norm = (short) (temp - 20);

				  if(GPU_HIST_CNT > 0){

					  temp_norm = MAX(GPU_TEMP_HIST[GPU_HIST_CNT-1]-3, temp_norm);
					  temp_norm = MIN(GPU_TEMP_HIST[GPU_HIST_CNT-1]+3, temp_norm);
				  }

				  if(GPU_HIST_CNT<HIST_LEN-1)
				  {
					GPU_TEMP_HIST[GPU_HIST_CNT] = temp_norm;
					GPU_HIST_CNT++;
				  }
				  else
				  {
					  for(int i=0; i < GPU_HIST_CNT-1; i++)
					  {
						  GPU_TEMP_HIST[i] = GPU_TEMP_HIST[i+1];
					  }
					  GPU_TEMP_HIST[GPU_HIST_CNT-1] = temp_norm;
				  }
				  RenderGraph(30,96,70,60,GPU_TEMP_HIST,GPU_HIST_CNT);

				  tft.setCursor(30, 170);
				  //tft.setTextColor(TEXT_COL, WHITE);
				  tft.print("GPU TEMP ");
				  tft.print(temp);
				  tft.print("C");
				  //tft.setTextColor(TEXT_COL, BG_COL);

				//This must be extended
				if(temp > 60) SetFaceMode(FACE_MODE_BADLYWOUNDED);
				else if (temp > 43) SetFaceMode(FACE_MODE_WOUNDED);
				else SetFaceMode(FACE_MODE_NORMAL);

			  }
			  else if(GPU_LOAD == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int gpu_load = atoi(REC_MSG);

				  tft.setCursor(295, 170);
				  RenderLoadBar_SIDE(300,106, 100, 50,100,gpu_load);



				  tft.print("LOAD ");
				  if(gpu_load < 10) tft.print(" ");
				  if(gpu_load < 100) tft.print(" ");
				  tft.print(gpu_load);
				  tft.print("%");
			  }
			  else if(CPU_LOAD == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int cpu_load = atoi(REC_MSG);

				  tft.setCursor(295, 73);
				  RenderLoadBar_SIDE(300,10, 100, 50,100,cpu_load);

				  tft.print("LOAD " );
				  if(cpu_load < 10) tft.print(" ");
				  if(cpu_load < 100) tft.print(" ");
				  tft.print(cpu_load);
				  tft.print("%");
			  }
			  else if(MB_TEMP == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int data = atoi(REC_MSG);

				  tft.setCursor(200, 226);

				  tft.print("MB  TEMP ");
				  if(data < 10) tft.print(" ");
				  if(data < 100) tft.print(" ");
				  if(data < 1000) tft.print(" ");
				  tft.print(data);
				  tft.print("C");
			  }
			  else if(MB_FAN == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int data = atoi(REC_MSG);

				  tft.setCursor(200, 255);

				  tft.print("FAN SPEED");
				  if(data < 10) tft.print(" ");
				  if(data < 100) tft.print(" ");
				  if(data < 1000) tft.print(" ");
				  tft.print(data);
				  tft.print("RM");
			  }
			  else if(RAM_LOAD == REC_MSG[0])
			  {
				  REC_MSG[0] = ' ';
				  int data = atoi(REC_MSG);

				  tft.setCursor(200, 285);

				  tft.print("RAM LOAD ");
				  if(data < 10) tft.print(" ");
				  if(data < 100) tft.print(" ");
				  if(data < 1000) tft.print(" ");
				  tft.print(data);
				  tft.print("%");
			  }
		  }
		  else
		  {
			RenderFace();
		  }
	}
	else
	{
		State = STATE_WAIT;
	}

}


void RenderFace()
{
	if(time > millis()) time = millis();

	  if(time + FACE_ATIME < millis())
	  {
		 time = millis();

		 if(Face_State == FACE1_NEUTRAL1)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy1_neutral, ALPHA_COL, true);


			 int NextState = rand()%6;
			 if(NextState == 1) Face_State = FACE1_LEFT;
			 else if (NextState == 2) Face_State = FACE1_RIGHT;
			 else Face_State = FACE1_NEUTRAL1;

		 }
		 else if(Face_State == FACE1_LEFT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy1_side, ALPHA_COL, false);
			 Face_State = FACE1_NEUTRAL1;
		 }
		 else if(Face_State== FACE1_RIGHT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy1_side, ALPHA_COL, true);
			 Face_State = FACE1_NEUTRAL1;
		 }
		 else if(Face_State == FACE2_NEUTRAL1)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy2_neutral, ALPHA_COL, true);
			 Face_State = FACE2_LEFT;

			 int NextState = rand()%6;
			 if(NextState == 1) Face_State = FACE2_LEFT;
			 else if (NextState == 2) Face_State = FACE2_RIGHT;
			 else Face_State = FACE2_NEUTRAL1;
		 }
		 else if(Face_State == FACE2_LEFT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy2_side, ALPHA_COL, false);
			 Face_State = FACE2_NEUTRAL1;
		 }
		 else if(Face_State== FACE2_RIGHT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy2_side, ALPHA_COL, true);
			 Face_State = FACE2_NEUTRAL1;
		 }
		 else if(Face_State == FACE3_NEUTRAL1)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy3_neutral, ALPHA_COL, true);
			 int NextState = rand()%6;
			 if(NextState == 1) Face_State = FACE3_LEFT;
			 else if (NextState == 2) Face_State = FACE3_RIGHT;
			 else Face_State = FACE3_NEUTRAL1;
		 }
		 else if(Face_State == FACE3_LEFT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy3_neutral, ALPHA_COL, false);
			 Face_State = FACE3_NEUTRAL1;
		 }
		 else if(Face_State == FACE3_RIGHT)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy3_neutral, ALPHA_COL, false);
			 Face_State = FACE3_NEUTRAL1;
		 }
		 else if(Face_State == FACE_GRIN)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy_grin, ALPHA_COL, true);
			 Face_State = FACE2_NEUTRAL1;
		 }
		 else if(Face_State == FACE_SUPRISED)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy_grin, ALPHA_COL, true);
			 Face_State = FACE3_NEUTRAL1;
		 }
		 else if(Face_State == FACE_GOD)
		 {
			 drawImg(FACE_X,FACE_Y,24,29,DoomGuy_grin, ALPHA_COL, true);
			 Face_State = FACE1_NEUTRAL1;
		 }
	  }
}

void SetFaceMode(char mode)
{
	if(mode==Face_Mode) return;

	Face_Mode = mode;

	switch(mode)
	{
		case FACE_MODE_NORMAL:
		Face_State = FACE_GOD;
		break;

		case FACE_MODE_WOUNDED:
		Face_State = FACE_GRIN;
		break;

		case FACE_MODE_BADLYWOUNDED:
		Face_State = FACE_SUPRISED;
		break;
	}
}



void RenderLoadBar(int x, int y, int width, int height,int max,int value)
{
	int seg = 6;
	int space = 2;
	int seg_h = ((height+space) / (seg)) - 2*space;

	int num_seg = (value*seg/max);
	int color;

	if (num_seg < 0.4*seg) color = GREEN;
	else if (num_seg < 0.75*seg) color = ORANGE;
	else color = RED;

	//tft.fillRect(x,y,width,height, BG_COL); // Clear Area


	for(int i = 0; i<=seg; i++)
	{
		if(i>num_seg) color = BLUE;
		tft.fillRect(x, (y + height) - ((i+1)*(seg_h+space)) + space, width, seg_h, color);
		//tft.fillRect((y + height) - ((i+1)*(seg_h+space)) + space,x, seg_h,  width, color);

	}
}

void RenderLoadBar_SIDE(int x, int y, int width, int height,int max,int value)
{
	int seg = 6;
	int space = 2;
	int seg_w = ((width+space) / (seg)) - 2*space;

	int num_seg = (value*seg / (max*0.9) );
	int color;

	if (num_seg < 0.4*seg) color = GREEN;
	else if (num_seg < 0.75*seg) color = ORANGE;
	else color = RED;

	for(int i = 0; i<=seg; i++)
	{
		if(i>num_seg) color = BLUE;
		tft.fillRect(x + ((i+1)*(seg_w+space)) + space, y, seg_w, height, color);
	}
}


void RenderGraph(int x, int y, int height, int max, short val[],char points)
{
	int scale = 5;
	int scalex = 9;

	tft.fillRect(x,y,(points*(scalex-2)+(scalex/2)),height, GRAY); // Clear Area

	for(int i=0; i<points; i++)
	{
		//int col = BLUE;
		//if((val[i]*10 / max) > 7) col = RED;
		//else if((val[i]*10 / max) > 4) col = ORANGE;

		unsigned long col;

		if(val[i] < 20) col = 31<<5;
		else if(val[i] > (max - 5)) col = 31 << 11;
		else
			{
				int col_val = val[i] - 20;
				int col_max = max - 30;
				col = (MIN(((col_val *32) / col_max),31) << 11) + (MAX(((col_max-col_val)*32 / col_max),0)<<5);
			}

		int val_norm = MIN(val[i], max);
		tft.fillRect(x+i*(scalex-2), (y+height) - val_norm,scalex,val_norm, col);
	}
}

void drawImg(int x,int y,int w,int h,const unsigned short *bmp,int alpha,bool dontflip, int bg_col = 0, int size = 4)
{
	int pos = 0;

	for(int i=0; i<w;i++)
	{
		for(int j=0; j<h;j++)
		{
			if(dontflip) pos = i+(j*w);
			else pos = (w-i)+(j*w);
			int col = pgm_read_word_near(bmp + pos);
			if(col == alpha) col = bg_col;

			tft.fillRect(x + (i*size), y + (j*size), size, size, col);

		}
	}
}

